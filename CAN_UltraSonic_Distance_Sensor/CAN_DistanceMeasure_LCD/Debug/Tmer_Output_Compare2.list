
Tmer_Output_Compare2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec4  08002ec4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec4  08002ec4  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000001c  08002ee8  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002ee8  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd4d  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ab2  00000000  00000000  0002cddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  0002e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091d  00000000  00000000  0002f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a9a  00000000  00000000  0002fd3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e29f  00000000  00000000  000517d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d014d  00000000  00000000  0005fa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030ec  00000000  00000000  0012fbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00132cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e8c 	.word	0x08002e8c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08002e8c 	.word	0x08002e8c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
uint32_t pulse2_value = 12500; // 1000 Hz
uint32_t pulse3_value = 6250; //  2000 Hz
uint32_t pulse4_value = 3125; //  4000 Hz

int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	HAL_Init();
 8000504:	f000 faf4 	bl	8000af0 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000508:	2032      	movs	r0, #50	; 0x32
 800050a:	f000 f82d 	bl	8000568 <SystemClock_Config_HSE>

	GPIO_Init();
 800050e:	f000 f8c9 	bl	80006a4 <GPIO_Init>

	UART2_Init();
 8000512:	f000 f8eb 	bl	80006ec <UART2_Init>

	TIMER2_Init();
 8000516:	f000 f90f 	bl	8000738 <TIMER2_Init>

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_1)!= HAL_OK)
 800051a:	2100      	movs	r1, #0
 800051c:	4811      	ldr	r0, [pc, #68]	; (8000564 <main+0x64>)
 800051e:	f001 fc61 	bl	8001de4 <HAL_TIM_OC_Start_IT>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <main+0x2c>
	{
		Error_handler();
 8000528:	f000 f9c4 	bl	80008b4 <Error_handler>
	}
	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_2)!= HAL_OK)
 800052c:	2104      	movs	r1, #4
 800052e:	480d      	ldr	r0, [pc, #52]	; (8000564 <main+0x64>)
 8000530:	f001 fc58 	bl	8001de4 <HAL_TIM_OC_Start_IT>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <main+0x3e>
	{
			Error_handler();
 800053a:	f000 f9bb 	bl	80008b4 <Error_handler>
	}
	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_3)!= HAL_OK)
 800053e:	2108      	movs	r1, #8
 8000540:	4808      	ldr	r0, [pc, #32]	; (8000564 <main+0x64>)
 8000542:	f001 fc4f 	bl	8001de4 <HAL_TIM_OC_Start_IT>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <main+0x50>
	{
		Error_handler();
 800054c:	f000 f9b2 	bl	80008b4 <Error_handler>
	}
	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_4)!= HAL_OK)
 8000550:	210c      	movs	r1, #12
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <main+0x64>)
 8000554:	f001 fc46 	bl	8001de4 <HAL_TIM_OC_Start_IT>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <main+0x62>
	{
		Error_handler();
 800055e:	f000 f9a9 	bl	80008b4 <Error_handler>
	}
	while(1)
 8000562:	e7fe      	b.n	8000562 <main+0x62>
 8000564:	20000038 	.word	0x20000038

08000568 <SystemClock_Config_HSE>:
}



void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	; 0x58
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 8000572:	2300      	movs	r3, #0
 8000574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000578:	2307      	movs	r3, #7
 800057a:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	623b      	str	r3, [r7, #32]
	Osc_Init.LSEState = RCC_LSE_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b78      	cmp	r3, #120	; 0x78
 8000598:	d038      	beq.n	800060c <SystemClock_Config_HSE+0xa4>
 800059a:	2b78      	cmp	r3, #120	; 0x78
 800059c:	dc7c      	bgt.n	8000698 <SystemClock_Config_HSE+0x130>
 800059e:	2b32      	cmp	r3, #50	; 0x32
 80005a0:	d002      	beq.n	80005a8 <SystemClock_Config_HSE+0x40>
 80005a2:	2b54      	cmp	r3, #84	; 0x54
 80005a4:	d019      	beq.n	80005da <SystemClock_Config_HSE+0x72>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 80005a6:	e077      	b.n	8000698 <SystemClock_Config_HSE+0x130>
		  Osc_Init.PLL.PLLM = 4;
 80005a8:	2304      	movs	r3, #4
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 80005ac:	2332      	movs	r3, #50	; 0x32
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80005d8:	e032      	b.n	8000640 <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 80005de:	2354      	movs	r3, #84	; 0x54
 80005e0:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800060a:	e019      	b.n	8000640 <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 8000610:	2378      	movs	r3, #120	; 0x78
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000630:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000636:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800063e:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f001 f8df 	bl	8001808 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config_HSE+0xec>
	{
			Error_handler();
 8000650:	f000 f930 	bl	80008b4 <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000654:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fd88 	bl	8001174 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config_HSE+0x106>
	{
		Error_handler();
 800066a:	f000 f923 	bl	80008b4 <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800066e:	f000 fe67 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8000672:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <SystemClock_Config_HSE+0x138>)
 8000678:	fba2 2303 	umull	r2, r3, r2, r3
 800067c:	099b      	lsrs	r3, r3, #6
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fbad 	bl	8000dde <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000684:	2004      	movs	r0, #4
 8000686:	f000 fbb7 	bl	8000df8 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	f04f 30ff 	mov.w	r0, #4294967295
 8000692:	f000 fb7a 	bl	8000d8a <HAL_NVIC_SetPriority>
 8000696:	e000      	b.n	800069a <SystemClock_Config_HSE+0x132>
	   return ;
 8000698:	bf00      	nop



 }
 800069a:	3758      	adds	r7, #88	; 0x58
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	10624dd3 	.word	0x10624dd3

080006a4 <GPIO_Init>:

void GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <GPIO_Init+0x40>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <GPIO_Init+0x40>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <GPIO_Init+0x40>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80006c6:	2320      	movs	r3, #32
 80006c8:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <GPIO_Init+0x44>)
 80006d8:	f000 fbb8 	bl	8000e4c <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020000 	.word	0x40020000

080006ec <UART2_Init>:


void UART2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <UART2_Init+0x44>)
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <UART2_Init+0x48>)
 80006f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <UART2_Init+0x44>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <UART2_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <UART2_Init+0x44>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <UART2_Init+0x44>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <UART2_Init+0x44>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <UART2_Init+0x44>)
 8000718:	220c      	movs	r2, #12
 800071a:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <UART2_Init+0x44>)
 800071e:	f002 f8d0 	bl	80028c2 <HAL_UART_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 8000728:	f000 f8c4 	bl	80008b4 <Error_handler>
	}


}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000080 	.word	0x20000080
 8000734:	40004400 	.word	0x40004400

08000738 <TIMER2_Init>:


 void TIMER2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
	 TIM_OC_InitTypeDef tim2OC_init;
	 htimer2.Instance = TIM2;
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <TIMER2_Init+0xac>)
 8000740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000744:	601a      	str	r2, [r3, #0]
	 htimer2.Init.Prescaler = 1;
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <TIMER2_Init+0xac>)
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
	 htimer2.Init.Period = 0xFFFFFFFF;
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <TIMER2_Init+0xac>)
 800074e:	f04f 32ff 	mov.w	r2, #4294967295
 8000752:	60da      	str	r2, [r3, #12]

	 if(HAL_TIM_OC_Init(&htimer2) != HAL_OK)
 8000754:	4823      	ldr	r0, [pc, #140]	; (80007e4 <TIMER2_Init+0xac>)
 8000756:	f001 faf5 	bl	8001d44 <HAL_TIM_OC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <TIMER2_Init+0x2c>
	 {
		 Error_handler();
 8000760:	f000 f8a8 	bl	80008b4 <Error_handler>
	 }

	 tim2OC_init.OCMode = TIM_OCMODE_TOGGLE; // Toggles upon Clock Count = Pulse
 8000764:	2330      	movs	r3, #48	; 0x30
 8000766:	607b      	str	r3, [r7, #4]
	 // Output is original, LOW means inverted version
	 tim2OC_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
	 // Want 500Hz for Channel 1. %00Hz is 0.002s period, 50 percent cycle is 0.001.
	 // The frequency of the one pulse is then 1/0.001, = 1000Hz.
	 // 25000000 / 1000 = 25000
	 tim2OC_init.Pulse = pulse1_value;
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <TIMER2_Init+0xb0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60bb      	str	r3, [r7, #8]
	 if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK)
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	4619      	mov	r1, r3
 8000778:	481a      	ldr	r0, [pc, #104]	; (80007e4 <TIMER2_Init+0xac>)
 800077a:	f001 fd51 	bl	8002220 <HAL_TIM_OC_ConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <TIMER2_Init+0x50>
	 {
		 Error_handler();
 8000784:	f000 f896 	bl	80008b4 <Error_handler>

	 }
	 tim2OC_init.Pulse = pulse2_value;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <TIMER2_Init+0xb4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60bb      	str	r3, [r7, #8]
	 if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_2) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2204      	movs	r2, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <TIMER2_Init+0xac>)
 8000796:	f001 fd43 	bl	8002220 <HAL_TIM_OC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <TIMER2_Init+0x6c>
	 {
		 Error_handler();
 80007a0:	f000 f888 	bl	80008b4 <Error_handler>

	 }
	 tim2OC_init.Pulse = pulse3_value;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <TIMER2_Init+0xb8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60bb      	str	r3, [r7, #8]
		 if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_3) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2208      	movs	r2, #8
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <TIMER2_Init+0xac>)
 80007b2:	f001 fd35 	bl	8002220 <HAL_TIM_OC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <TIMER2_Init+0x88>
		 {
			 Error_handler();
 80007bc:	f000 f87a 	bl	80008b4 <Error_handler>

		 }
	 tim2OC_init.Pulse = pulse4_value;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <TIMER2_Init+0xbc>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60bb      	str	r3, [r7, #8]
		 if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_4) != HAL_OK)
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	220c      	movs	r2, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <TIMER2_Init+0xac>)
 80007ce:	f001 fd27 	bl	8002220 <HAL_TIM_OC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <TIMER2_Init+0xa4>
		 {
			 Error_handler();
 80007d8:	f000 f86c 	bl	80008b4 <Error_handler>

		 }

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000038 	.word	0x20000038
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000008 	.word	0x20000008
 80007f4:	2000000c 	.word	0x2000000c

080007f8 <HAL_TIM_OC_DelayElapsedCallback>:
 void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	 // Check if the 500Hz Channel 1 Triggered it
   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7f1b      	ldrb	r3, [r3, #28]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d10e      	bne.n	8000826 <HAL_TIM_OC_DelayElapsedCallback+0x2e>
   {
	   //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	   ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000808:	2100      	movs	r1, #0
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f001 fd64 	bl	80022d8 <HAL_TIM_ReadCapturedValue>
 8000810:	4603      	mov	r3, r0
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000814:	6013      	str	r3, [r2, #0]
	   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content+pulse1_value);
 8000816:	4b22      	ldr	r3, [pc, #136]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000818:	6819      	ldr	r1, [r3, #0]
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	440a      	add	r2, r1
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
   }
   // Check if the 1000Hz Channel 2 triggered it
   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7f1b      	ldrb	r3, [r3, #28]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d10e      	bne.n	800084c <HAL_TIM_OC_DelayElapsedCallback+0x54>
  {
   ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800082e:	2104      	movs	r1, #4
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f001 fd51 	bl	80022d8 <HAL_TIM_ReadCapturedValue>
 8000836:	4603      	mov	r3, r0
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800083a:	6013      	str	r3, [r2, #0]
   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content+pulse2_value);
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	440a      	add	r2, r1
 800084a:	639a      	str	r2, [r3, #56]	; 0x38
  }
   // 2000Hz
   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7f1b      	ldrb	r3, [r3, #28]
 8000850:	2b04      	cmp	r3, #4
 8000852:	d10e      	bne.n	8000872 <HAL_TIM_OC_DelayElapsedCallback+0x7a>
  {
   ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000854:	2108      	movs	r1, #8
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f001 fd3e 	bl	80022d8 <HAL_TIM_ReadCapturedValue>
 800085c:	4603      	mov	r3, r0
 800085e:	4a10      	ldr	r2, [pc, #64]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000860:	6013      	str	r3, [r2, #0]
   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content+pulse3_value);
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	440a      	add	r2, r1
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  }
   // 4000Hz
   if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7f1b      	ldrb	r3, [r3, #28]
 8000876:	2b08      	cmp	r3, #8
 8000878:	d10e      	bne.n	8000898 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
  {
   ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800087a:	210c      	movs	r1, #12
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f001 fd2b 	bl	80022d8 <HAL_TIM_ReadCapturedValue>
 8000882:	4603      	mov	r3, r0
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000886:	6013      	str	r3, [r2, #0]
   __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content+pulse4_value);
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800088a:	6819      	ldr	r1, [r3, #0]
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	440a      	add	r2, r1
 8000896:	641a      	str	r2, [r3, #64]	; 0x40
  }

 }
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000c4 	.word	0x200000c4
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000004 	.word	0x20000004
 80008ac:	20000008 	.word	0x20000008
 80008b0:	2000000c 	.word	0x2000000c

080008b4 <Error_handler>:




void Error_handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
	while(1);
 80008b8:	e7fe      	b.n	80008b8 <Error_handler+0x4>
	...

080008bc <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 fa57 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x40>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <HAL_MspInit+0x40>)
 80008cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80008d0:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	f06f 000b 	mvn.w	r0, #11
 80008da:	f000 fa56 	bl	8000d8a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	f06f 000a 	mvn.w	r0, #10
 80008e6:	f000 fa50 	bl	8000d8a <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	f06f 0009 	mvn.w	r0, #9
 80008f2:	f000 fa4a 	bl	8000d8a <HAL_NVIC_SetPriority>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <HAL_TIM_OC_MspInit>:
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;
	//1. enable the peripheral clock for the timer2 peripheral
	// Inclulding Port A and B if Desired
	 __HAL_RCC_TIM2_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a29      	ldr	r2, [pc, #164]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	4a22      	ldr	r2, [pc, #136]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6313      	str	r3, [r2, #48]	; 0x30
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
	 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 800094a:	f043 0302 	orr.w	r3, r3, #2
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_TIM_OC_MspInit+0xb8>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]

	 //2. Configure a gpio to behave as timer2 channel 1
	 tim2OC_ch_gpios.Pin = GPIO_PIN_5 | GPIO_PIN_1;
 800095c:	2322      	movs	r3, #34	; 0x22
 800095e:	617b      	str	r3, [r7, #20]
	 tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
	 tim2OC_ch_gpios.Pull =	GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
     tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
     tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2; // Acts like Tim2 and is Alternate Function
 800096c:	2301      	movs	r3, #1
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4811      	ldr	r0, [pc, #68]	; (80009bc <HAL_TIM_OC_MspInit+0xbc>)
 8000978:	f000 fa68 	bl	8000e4c <HAL_GPIO_Init>
     // We are using PortB PB10 for Channel 3 and PB2 for Channel 4
     tim2OC_ch_gpios.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 800097c:	f240 4304 	movw	r3, #1028	; 0x404
 8000980:	617b      	str	r3, [r7, #20]
     tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
     tim2OC_ch_gpios.Pull =	GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
     tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]
     tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 800098e:	2301      	movs	r3, #1
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpios);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_TIM_OC_MspInit+0xc0>)
 800099a:	f000 fa57 	bl	8000e4c <HAL_GPIO_Init>


	 //3. nvic settings
	 HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	201c      	movs	r0, #28
 80009a4:	f000 f9f1 	bl	8000d8a <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009a8:	201c      	movs	r0, #28
 80009aa:	f000 fa0a 	bl	8000dc2 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020400 	.word	0x40020400

080009c4 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	6413      	str	r3, [r2, #64]	; 0x40
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_UART_MspInit+0x88>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000a04:	2304      	movs	r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000a14:	2307      	movs	r3, #7
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480c      	ldr	r0, [pc, #48]	; (8000a50 <HAL_UART_MspInit+0x8c>)
 8000a20:	f000 fa14 	bl	8000e4c <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000a24:	2308      	movs	r3, #8
 8000a26:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_MspInit+0x8c>)
 8000a30:	f000 fa0c 	bl	8000e4c <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a34:	2026      	movs	r0, #38	; 0x26
 8000a36:	f000 f9c4 	bl	8000dc2 <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	2026      	movs	r0, #38	; 0x26
 8000a40:	f000 f9a3 	bl	8000d8a <HAL_NVIC_SetPriority>

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	; 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <SysTick_Handler>:
// #include "st32f4xx_hal.h"
#include "main.h"
extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000a58:	f000 f89c 	bl	8000b94 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000a5c:	f000 f9e8 	bl	8000e30 <HAL_SYSTICK_IRQHandler>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM2_IRQHandler+0x10>)
 8000a6a:	f001 fad1 	bl	8002010 <HAL_TIM_IRQHandler>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000038 	.word	0x20000038

08000a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aa2:	490e      	ldr	r1, [pc, #56]	; (8000adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab8:	4c0b      	ldr	r4, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ac6:	f7ff ffd7 	bl	8000a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 f9bb 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fd17 	bl	8000500 <main>
  bx  lr    
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ae0:	08002ecc 	.word	0x08002ecc
  ldr r2, =_sbss
 8000ae4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ae8:	200000cc 	.word	0x200000cc

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f92b 	bl	8000d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff feca 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f943 	bl	8000dde <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f90b 	bl	8000d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000010 	.word	0x20000010
 8000b8c:	20000018 	.word	0x20000018
 8000b90:	20000014 	.word	0x20000014

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000018 	.word	0x20000018
 8000bb8:	200000c8 	.word	0x200000c8

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000c8 	.word	0x200000c8

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	; (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d40:	d301      	bcc.n	8000d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00f      	b.n	8000d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <SysTick_Config+0x40>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4e:	210f      	movs	r1, #15
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f7ff ff8e 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <SysTick_Config+0x40>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <SysTick_Config+0x40>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010

08000d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ff29 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9c:	f7ff ff3e 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	6978      	ldr	r0, [r7, #20]
 8000da8:	f7ff ff8e 	bl	8000cc8 <NVIC_EncodePriority>
 8000dac:	4602      	mov	r2, r0
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff5d 	bl	8000c74 <__NVIC_SetPriority>
}
 8000dba:	bf00      	nop
 8000dbc:	3718      	adds	r7, #24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff31 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffa2 	bl	8000d30 <SysTick_Config>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	d106      	bne.n	8000e14 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000e12:	e005      	b.n	8000e20 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000e1a:	f023 0304 	bic.w	r3, r3, #4
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e34:	f000 f802 	bl	8000e3c <HAL_SYSTICK_Callback>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e165      	b.n	8001134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e68:	2201      	movs	r2, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	f040 8154 	bne.w	800112e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d005      	beq.n	8000e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d130      	bne.n	8000f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	f003 0201 	and.w	r2, r3, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d017      	beq.n	8000f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d123      	bne.n	8000f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	08da      	lsrs	r2, r3, #3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3208      	adds	r2, #8
 8000f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f003 0307 	and.w	r3, r3, #7
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	220f      	movs	r2, #15
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	69b9      	ldr	r1, [r7, #24]
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0203 	and.w	r2, r3, #3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 80ae 	beq.w	800112e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b5d      	ldr	r3, [pc, #372]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b5a      	ldr	r3, [pc, #360]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fee:	4a58      	ldr	r2, [pc, #352]	; (8001150 <HAL_GPIO_Init+0x304>)
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d025      	beq.n	8001066 <HAL_GPIO_Init+0x21a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x30c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d01f      	beq.n	8001062 <HAL_GPIO_Init+0x216>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x310>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x212>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x314>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x20e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x318>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x20a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x31c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x206>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x320>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x202>
 800104a:	2306      	movs	r3, #6
 800104c:	e00c      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800104e:	2307      	movs	r3, #7
 8001050:	e00a      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001052:	2305      	movs	r3, #5
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001056:	2304      	movs	r3, #4
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x21c>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x304>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <HAL_GPIO_Init+0x324>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_GPIO_Init+0x324>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001128:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_GPIO_Init+0x324>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f ae96 	bls.w	8000e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40021400 	.word	0x40021400
 800116c:	40021800 	.word	0x40021800
 8001170:	40013c00 	.word	0x40013c00

08001174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e0cc      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001188:	4b68      	ldr	r3, [pc, #416]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d90c      	bls.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b63      	ldr	r3, [pc, #396]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0b8      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d020      	beq.n	80011fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c8:	4b59      	ldr	r3, [pc, #356]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0308 	and.w	r3, r3, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e0:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ec:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	494d      	ldr	r1, [pc, #308]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d044      	beq.n	8001294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e07f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d003      	beq.n	8001232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	2b03      	cmp	r3, #3
 8001230:	d107      	bne.n	8001242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d109      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e06f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e067      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f023 0203 	bic.w	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001264:	f7ff fcaa 	bl	8000bbc <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126a:	e00a      	b.n	8001282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7ff fca6 	bl	8000bbc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f241 3288 	movw	r2, #5000	; 0x1388
 800127a:	4293      	cmp	r3, r2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e04f      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 020c 	and.w	r2, r3, #12
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	429a      	cmp	r2, r3
 8001292:	d1eb      	bne.n	800126c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d20c      	bcs.n	80012bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_RCC_ClockConfig+0x1b8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e032      	b.n	8001322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4916      	ldr	r1, [pc, #88]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	490e      	ldr	r1, [pc, #56]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 f855 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	490a      	ldr	r1, [pc, #40]	; (8001334 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	5ccb      	ldrb	r3, [r1, r3]
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_ClockConfig+0x1c8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fc0a 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023c00 	.word	0x40023c00
 8001330:	40023800 	.word	0x40023800
 8001334:	08002ea4 	.word	0x08002ea4
 8001338:	20000010 	.word	0x20000010
 800133c:	20000014 	.word	0x20000014

08001340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_RCC_GetHCLKFreq+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000010 	.word	0x20000010

08001358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800135c:	f7ff fff0 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001360:	4602      	mov	r2, r0
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	0a9b      	lsrs	r3, r3, #10
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4903      	ldr	r1, [pc, #12]	; (800137c <HAL_RCC_GetPCLK1Freq+0x24>)
 800136e:	5ccb      	ldrb	r3, [r1, r3]
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001374:	4618      	mov	r0, r3
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	08002eb4 	.word	0x08002eb4

08001380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001384:	f7ff ffdc 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0b5b      	lsrs	r3, r3, #13
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4903      	ldr	r1, [pc, #12]	; (80013a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08002eb4 	.word	0x08002eb4

080013a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ac:	b0ae      	sub	sp, #184	; 0xb8
 80013ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ce:	4bcb      	ldr	r3, [pc, #812]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	f200 8206 	bhi.w	80017e8 <HAL_RCC_GetSysClockFreq+0x440>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	08001419 	.word	0x08001419
 80013e8:	080017e9 	.word	0x080017e9
 80013ec:	080017e9 	.word	0x080017e9
 80013f0:	080017e9 	.word	0x080017e9
 80013f4:	08001421 	.word	0x08001421
 80013f8:	080017e9 	.word	0x080017e9
 80013fc:	080017e9 	.word	0x080017e9
 8001400:	080017e9 	.word	0x080017e9
 8001404:	08001429 	.word	0x08001429
 8001408:	080017e9 	.word	0x080017e9
 800140c:	080017e9 	.word	0x080017e9
 8001410:	080017e9 	.word	0x080017e9
 8001414:	08001619 	.word	0x08001619
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001418:	4bb9      	ldr	r3, [pc, #740]	; (8001700 <HAL_RCC_GetSysClockFreq+0x358>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800141e:	e1e7      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001420:	4bb8      	ldr	r3, [pc, #736]	; (8001704 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001426:	e1e3      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001428:	4bb4      	ldr	r3, [pc, #720]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001434:	4bb1      	ldr	r3, [pc, #708]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d071      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001440:	4bae      	ldr	r3, [pc, #696]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	2200      	movs	r2, #0
 8001448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800144c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001458:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001466:	4622      	mov	r2, r4
 8001468:	462b      	mov	r3, r5
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f04f 0100 	mov.w	r1, #0
 8001472:	0159      	lsls	r1, r3, #5
 8001474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001478:	0150      	lsls	r0, r2, #5
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4621      	mov	r1, r4
 8001480:	1a51      	subs	r1, r2, r1
 8001482:	6439      	str	r1, [r7, #64]	; 0x40
 8001484:	4629      	mov	r1, r5
 8001486:	eb63 0301 	sbc.w	r3, r3, r1
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001498:	4649      	mov	r1, r9
 800149a:	018b      	lsls	r3, r1, #6
 800149c:	4641      	mov	r1, r8
 800149e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014a2:	4641      	mov	r1, r8
 80014a4:	018a      	lsls	r2, r1, #6
 80014a6:	4641      	mov	r1, r8
 80014a8:	1a51      	subs	r1, r2, r1
 80014aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80014ac:	4649      	mov	r1, r9
 80014ae:	eb63 0301 	sbc.w	r3, r3, r1
 80014b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014c0:	4649      	mov	r1, r9
 80014c2:	00cb      	lsls	r3, r1, #3
 80014c4:	4641      	mov	r1, r8
 80014c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ca:	4641      	mov	r1, r8
 80014cc:	00ca      	lsls	r2, r1, #3
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	4603      	mov	r3, r0
 80014d4:	4622      	mov	r2, r4
 80014d6:	189b      	adds	r3, r3, r2
 80014d8:	633b      	str	r3, [r7, #48]	; 0x30
 80014da:	462b      	mov	r3, r5
 80014dc:	460a      	mov	r2, r1
 80014de:	eb42 0303 	adc.w	r3, r2, r3
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80014f0:	4629      	mov	r1, r5
 80014f2:	024b      	lsls	r3, r1, #9
 80014f4:	4621      	mov	r1, r4
 80014f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014fa:	4621      	mov	r1, r4
 80014fc:	024a      	lsls	r2, r1, #9
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001506:	2200      	movs	r2, #0
 8001508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800150c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001510:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001514:	f7fe fe76 	bl	8000204 <__aeabi_uldivmod>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4613      	mov	r3, r2
 800151e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001522:	e067      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4b75      	ldr	r3, [pc, #468]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001530:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001534:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153c:	67bb      	str	r3, [r7, #120]	; 0x78
 800153e:	2300      	movs	r3, #0
 8001540:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001542:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001546:	4622      	mov	r2, r4
 8001548:	462b      	mov	r3, r5
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	0159      	lsls	r1, r3, #5
 8001554:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001558:	0150      	lsls	r0, r2, #5
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4621      	mov	r1, r4
 8001560:	1a51      	subs	r1, r2, r1
 8001562:	62b9      	str	r1, [r7, #40]	; 0x28
 8001564:	4629      	mov	r1, r5
 8001566:	eb63 0301 	sbc.w	r3, r3, r1
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001578:	4649      	mov	r1, r9
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	4641      	mov	r1, r8
 800157e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001582:	4641      	mov	r1, r8
 8001584:	018a      	lsls	r2, r1, #6
 8001586:	4641      	mov	r1, r8
 8001588:	ebb2 0a01 	subs.w	sl, r2, r1
 800158c:	4649      	mov	r1, r9
 800158e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800159e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015a6:	4692      	mov	sl, r2
 80015a8:	469b      	mov	fp, r3
 80015aa:	4623      	mov	r3, r4
 80015ac:	eb1a 0303 	adds.w	r3, sl, r3
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	462b      	mov	r3, r5
 80015b4:	eb4b 0303 	adc.w	r3, fp, r3
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015c6:	4629      	mov	r1, r5
 80015c8:	028b      	lsls	r3, r1, #10
 80015ca:	4621      	mov	r1, r4
 80015cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015d0:	4621      	mov	r1, r4
 80015d2:	028a      	lsls	r2, r1, #10
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015dc:	2200      	movs	r2, #0
 80015de:	673b      	str	r3, [r7, #112]	; 0x70
 80015e0:	677a      	str	r2, [r7, #116]	; 0x74
 80015e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015e6:	f7fe fe0d 	bl	8000204 <__aeabi_uldivmod>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4613      	mov	r3, r2
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	3301      	adds	r3, #1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001606:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800160a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800160e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001616:	e0eb      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d06b      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	2200      	movs	r2, #0
 8001638:	66bb      	str	r3, [r7, #104]	; 0x68
 800163a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800163c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800163e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001642:	663b      	str	r3, [r7, #96]	; 0x60
 8001644:	2300      	movs	r3, #0
 8001646:	667b      	str	r3, [r7, #100]	; 0x64
 8001648:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800164c:	4622      	mov	r2, r4
 800164e:	462b      	mov	r3, r5
 8001650:	f04f 0000 	mov.w	r0, #0
 8001654:	f04f 0100 	mov.w	r1, #0
 8001658:	0159      	lsls	r1, r3, #5
 800165a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800165e:	0150      	lsls	r0, r2, #5
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4621      	mov	r1, r4
 8001666:	1a51      	subs	r1, r2, r1
 8001668:	61b9      	str	r1, [r7, #24]
 800166a:	4629      	mov	r1, r5
 800166c:	eb63 0301 	sbc.w	r3, r3, r1
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800167e:	4659      	mov	r1, fp
 8001680:	018b      	lsls	r3, r1, #6
 8001682:	4651      	mov	r1, sl
 8001684:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001688:	4651      	mov	r1, sl
 800168a:	018a      	lsls	r2, r1, #6
 800168c:	4651      	mov	r1, sl
 800168e:	ebb2 0801 	subs.w	r8, r2, r1
 8001692:	4659      	mov	r1, fp
 8001694:	eb63 0901 	sbc.w	r9, r3, r1
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ac:	4690      	mov	r8, r2
 80016ae:	4699      	mov	r9, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	eb18 0303 	adds.w	r3, r8, r3
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	462b      	mov	r3, r5
 80016ba:	eb49 0303 	adc.w	r3, r9, r3
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016cc:	4629      	mov	r1, r5
 80016ce:	024b      	lsls	r3, r1, #9
 80016d0:	4621      	mov	r1, r4
 80016d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016d6:	4621      	mov	r1, r4
 80016d8:	024a      	lsls	r2, r1, #9
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016e2:	2200      	movs	r2, #0
 80016e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80016e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016ec:	f7fe fd8a 	bl	8000204 <__aeabi_uldivmod>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4613      	mov	r3, r2
 80016f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016fa:	e065      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x420>
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400
 8001704:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_GetSysClockFreq+0x458>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	099b      	lsrs	r3, r3, #6
 800170e:	2200      	movs	r2, #0
 8001710:	4618      	mov	r0, r3
 8001712:	4611      	mov	r1, r2
 8001714:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001718:	653b      	str	r3, [r7, #80]	; 0x50
 800171a:	2300      	movs	r3, #0
 800171c:	657b      	str	r3, [r7, #84]	; 0x54
 800171e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001722:	4642      	mov	r2, r8
 8001724:	464b      	mov	r3, r9
 8001726:	f04f 0000 	mov.w	r0, #0
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	0159      	lsls	r1, r3, #5
 8001730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001734:	0150      	lsls	r0, r2, #5
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4641      	mov	r1, r8
 800173c:	1a51      	subs	r1, r2, r1
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	4649      	mov	r1, r9
 8001742:	eb63 0301 	sbc.w	r3, r3, r1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001754:	4659      	mov	r1, fp
 8001756:	018b      	lsls	r3, r1, #6
 8001758:	4651      	mov	r1, sl
 800175a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175e:	4651      	mov	r1, sl
 8001760:	018a      	lsls	r2, r1, #6
 8001762:	4651      	mov	r1, sl
 8001764:	1a54      	subs	r4, r2, r1
 8001766:	4659      	mov	r1, fp
 8001768:	eb63 0501 	sbc.w	r5, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00eb      	lsls	r3, r5, #3
 8001776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800177a:	00e2      	lsls	r2, r4, #3
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	4643      	mov	r3, r8
 8001782:	18e3      	adds	r3, r4, r3
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	464b      	mov	r3, r9
 8001788:	eb45 0303 	adc.w	r3, r5, r3
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179a:	4629      	mov	r1, r5
 800179c:	028b      	lsls	r3, r1, #10
 800179e:	4621      	mov	r1, r4
 80017a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a4:	4621      	mov	r1, r4
 80017a6:	028a      	lsls	r2, r1, #10
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b0:	2200      	movs	r2, #0
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80017b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017ba:	f7fe fd23 	bl	8000204 <__aeabi_uldivmod>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4613      	mov	r3, r2
 80017c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0f1b      	lsrs	r3, r3, #28
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017e6:	e003      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80017ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	37b8      	adds	r7, #184	; 0xb8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	00f42400 	.word	0x00f42400

08001808 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e28d      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8083 	beq.w	800192e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001828:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d019      	beq.n	8001868 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001834:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800183c:	2b08      	cmp	r3, #8
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800184c:	d00c      	beq.n	8001868 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d112      	bne.n	8001880 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001866:	d10b      	bne.n	8001880 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05b      	beq.n	800192c <HAL_RCC_OscConfig+0x124>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d157      	bne.n	800192c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e25a      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001888:	d106      	bne.n	8001898 <HAL_RCC_OscConfig+0x90>
 800188a:	4b7c      	ldr	r3, [pc, #496]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a7b      	ldr	r2, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xcc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xb4>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xcc>
 80018bc:	4b6f      	ldr	r3, [pc, #444]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6e      	ldr	r2, [pc, #440]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a6b      	ldr	r2, [pc, #428]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff f96e 	bl	8000bbc <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff f96a 	bl	8000bbc <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e21f      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b61      	ldr	r3, [pc, #388]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xdc>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f95a 	bl	8000bbc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f956 	bl	8000bbc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e20b      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x104>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d06f      	beq.n	8001a1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d017      	beq.n	8001976 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001946:	4b4d      	ldr	r3, [pc, #308]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194e:	2b08      	cmp	r3, #8
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001952:	4b4a      	ldr	r3, [pc, #296]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00b      	beq.n	8001976 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d11c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800196a:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d116      	bne.n	80019a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x186>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1d3      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4937      	ldr	r1, [pc, #220]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	e03a      	b.n	8001a1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d020      	beq.n	80019ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ac:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <HAL_RCC_OscConfig+0x278>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff f903 	bl	8000bbc <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff f8ff 	bl	8000bbc <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e1b4      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d0f0      	beq.n	80019ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4925      	ldr	r1, [pc, #148]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	600b      	str	r3, [r1, #0]
 80019ec:	e015      	b.n	8001a1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ee:	4b24      	ldr	r3, [pc, #144]	; (8001a80 <HAL_RCC_OscConfig+0x278>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8e2 	bl	8000bbc <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fc:	f7ff f8de 	bl	8000bbc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e193      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d036      	beq.n	8001a94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a34:	f7ff f8c2 	bl	8000bbc <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f8be 	bl	8000bbc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e173      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x234>
 8001a5a:	e01b      	b.n	8001a94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_RCC_OscConfig+0x27c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a62:	f7ff f8ab 	bl	8000bbc <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	e00e      	b.n	8001a88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8a7 	bl	8000bbc <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d907      	bls.n	8001a88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e15c      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	42470000 	.word	0x42470000
 8001a84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a88:	4b8a      	ldr	r3, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ea      	bne.n	8001a6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8097 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa6:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a7e      	ldr	r2, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aea:	f7ff f867 	bl	8000bbc <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001af2:	f7ff f863 	bl	8000bbc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e118      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x4b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x31e>
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a65      	ldr	r2, [pc, #404]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x358>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b05      	cmp	r3, #5
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x340>
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0x358>
 8001b48:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	f023 0301 	bic.w	r3, r3, #1
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f023 0304 	bic.w	r3, r3, #4
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d015      	beq.n	8001b94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b68:	f7ff f828 	bl	8000bbc <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f824 	bl	8000bbc <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0d7      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ee      	beq.n	8001b70 <HAL_RCC_OscConfig+0x368>
 8001b92:	e014      	b.n	8001bbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff f812 	bl	8000bbc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f80e 	bl	8000bbc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0c1      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ee      	bne.n	8001b9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80ad 	beq.w	8001d34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d060      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d145      	bne.n	8001c7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ffe2 	bl	8000bbc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7fe ffde 	bl	8000bbc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e093      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c30:	085b      	lsrs	r3, r3, #1
 8001c32:	3b01      	subs	r3, #1
 8001c34:	041b      	lsls	r3, r3, #16
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	071b      	lsls	r3, r3, #28
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe ffb3 	bl	8000bbc <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7fe ffaf 	bl	8000bbc <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e064      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x452>
 8001c78:	e05c      	b.n	8001d34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4b4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe ff9c 	bl	8000bbc <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c88:	f7fe ff98 	bl	8000bbc <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e04d      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x480>
 8001ca6:	e045      	b.n	8001d34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e040      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_RCC_OscConfig+0x538>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d129      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d122      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d119      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10f      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e041      	b.n	8001dda <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fdc8 	bl	8000900 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4619      	mov	r1, r3
 8001d82:	4610      	mov	r0, r2
 8001d84:	f000 fb14 	bl	80023b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_TIM_OC_Start_IT+0x28>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e022      	b.n	8001e52 <HAL_TIM_OC_Start_IT+0x6e>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d109      	bne.n	8001e26 <HAL_TIM_OC_Start_IT+0x42>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	bf14      	ite	ne
 8001e1e:	2301      	movne	r3, #1
 8001e20:	2300      	moveq	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e015      	b.n	8001e52 <HAL_TIM_OC_Start_IT+0x6e>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d109      	bne.n	8001e40 <HAL_TIM_OC_Start_IT+0x5c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e008      	b.n	8001e52 <HAL_TIM_OC_Start_IT+0x6e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	bf14      	ite	ne
 8001e4c:	2301      	movne	r3, #1
 8001e4e:	2300      	moveq	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0c7      	b.n	8001fea <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_OC_Start_IT+0x86>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e68:	e013      	b.n	8001e92 <HAL_TIM_OC_Start_IT+0xae>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d104      	bne.n	8001e7a <HAL_TIM_OC_Start_IT+0x96>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e78:	e00b      	b.n	8001e92 <HAL_TIM_OC_Start_IT+0xae>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIM_OC_Start_IT+0xa6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e88:	e003      	b.n	8001e92 <HAL_TIM_OC_Start_IT+0xae>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d841      	bhi.n	8001f1c <HAL_TIM_OC_Start_IT+0x138>
 8001e98:	a201      	add	r2, pc, #4	; (adr r2, 8001ea0 <HAL_TIM_OC_Start_IT+0xbc>)
 8001e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9e:	bf00      	nop
 8001ea0:	08001ed5 	.word	0x08001ed5
 8001ea4:	08001f1d 	.word	0x08001f1d
 8001ea8:	08001f1d 	.word	0x08001f1d
 8001eac:	08001f1d 	.word	0x08001f1d
 8001eb0:	08001ee7 	.word	0x08001ee7
 8001eb4:	08001f1d 	.word	0x08001f1d
 8001eb8:	08001f1d 	.word	0x08001f1d
 8001ebc:	08001f1d 	.word	0x08001f1d
 8001ec0:	08001ef9 	.word	0x08001ef9
 8001ec4:	08001f1d 	.word	0x08001f1d
 8001ec8:	08001f1d 	.word	0x08001f1d
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	08001f0b 	.word	0x08001f0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0202 	orr.w	r2, r2, #2
 8001ee2:	60da      	str	r2, [r3, #12]
      break;
 8001ee4:	e01d      	b.n	8001f22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0204 	orr.w	r2, r2, #4
 8001ef4:	60da      	str	r2, [r3, #12]
      break;
 8001ef6:	e014      	b.n	8001f22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0208 	orr.w	r2, r2, #8
 8001f06:	60da      	str	r2, [r3, #12]
      break;
 8001f08:	e00b      	b.n	8001f22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0210 	orr.w	r2, r2, #16
 8001f18:	60da      	str	r2, [r3, #12]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f20:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d15f      	bne.n	8001fe8 <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	6839      	ldr	r1, [r7, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fc8d 	bl	8002850 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_TIM_OC_Start_IT+0x210>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_TIM_OC_Start_IT+0x166>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <HAL_TIM_OC_Start_IT+0x214>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_OC_Start_IT+0x16a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_TIM_OC_Start_IT+0x16c>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a22      	ldr	r2, [pc, #136]	; (8001ff4 <HAL_TIM_OC_Start_IT+0x210>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f76:	d01d      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_TIM_OC_Start_IT+0x218>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <HAL_TIM_OC_Start_IT+0x21c>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_TIM_OC_Start_IT+0x220>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <HAL_TIM_OC_Start_IT+0x214>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_TIM_OC_Start_IT+0x224>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_OC_Start_IT+0x1d0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a17      	ldr	r2, [pc, #92]	; (800200c <HAL_TIM_OC_Start_IT+0x228>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	40000c00 	.word	0x40000c00
 8002008:	40014000 	.word	0x40014000
 800200c:	40001800 	.word	0x40001800

08002010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d122      	bne.n	800206c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b02      	cmp	r3, #2
 8002032:	d11b      	bne.n	800206c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0202 	mvn.w	r2, #2
 800203c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f98e 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 8002058:	e005      	b.n	8002066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe fbcc 	bl	80007f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f991 	bl	8002388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b04      	cmp	r3, #4
 8002078:	d122      	bne.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11b      	bne.n	80020c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0204 	mvn.w	r2, #4
 8002090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2202      	movs	r2, #2
 8002096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f964 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 80020ac:	e005      	b.n	80020ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fba2 	bl	80007f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f967 	bl	8002388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d122      	bne.n	8002114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11b      	bne.n	8002114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0208 	mvn.w	r2, #8
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2204      	movs	r2, #4
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f93a 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fb78 	bl	80007f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f93d 	bl	8002388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0310 	and.w	r3, r3, #16
 800211e:	2b10      	cmp	r3, #16
 8002120:	d122      	bne.n	8002168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b10      	cmp	r3, #16
 800212e:	d11b      	bne.n	8002168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0210 	mvn.w	r2, #16
 8002138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2208      	movs	r2, #8
 800213e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f910 	bl	8002374 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fb4e 	bl	80007f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f913 	bl	8002388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0201 	mvn.w	r2, #1
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8e6 	bl	8002360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	2b80      	cmp	r3, #128	; 0x80
 80021a0:	d10e      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d107      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fb77 	bl	80028ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	d10e      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d107      	bne.n	80021ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8d8 	bl	800239c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d10e      	bne.n	8002218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b20      	cmp	r3, #32
 8002206:	d107      	bne.n	8002218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb41 	bl	800289a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_TIM_OC_ConfigChannel+0x1e>
 800223a:	2302      	movs	r3, #2
 800223c:	e048      	b.n	80022d0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	d839      	bhi.n	80022c0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800224c:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <HAL_TIM_OC_ConfigChannel+0x34>)
 800224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002252:	bf00      	nop
 8002254:	08002289 	.word	0x08002289
 8002258:	080022c1 	.word	0x080022c1
 800225c:	080022c1 	.word	0x080022c1
 8002260:	080022c1 	.word	0x080022c1
 8002264:	08002297 	.word	0x08002297
 8002268:	080022c1 	.word	0x080022c1
 800226c:	080022c1 	.word	0x080022c1
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080022a5 	.word	0x080022a5
 8002278:	080022c1 	.word	0x080022c1
 800227c:	080022c1 	.word	0x080022c1
 8002280:	080022c1 	.word	0x080022c1
 8002284:	080022b3 	.word	0x080022b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f92e 	bl	80024f0 <TIM_OC1_SetConfig>
      break;
 8002294:	e017      	b.n	80022c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68b9      	ldr	r1, [r7, #8]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f997 	bl	80025d0 <TIM_OC2_SetConfig>
      break;
 80022a2:	e010      	b.n	80022c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fa06 	bl	80026bc <TIM_OC3_SetConfig>
      break;
 80022b0:	e009      	b.n	80022c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fa73 	bl	80027a4 <TIM_OC4_SetConfig>
      break;
 80022be:	e002      	b.n	80022c6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
      break;
 80022c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d831      	bhi.n	8002350 <HAL_TIM_ReadCapturedValue+0x78>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002329 	.word	0x08002329
 80022f8:	08002351 	.word	0x08002351
 80022fc:	08002351 	.word	0x08002351
 8002300:	08002351 	.word	0x08002351
 8002304:	08002333 	.word	0x08002333
 8002308:	08002351 	.word	0x08002351
 800230c:	08002351 	.word	0x08002351
 8002310:	08002351 	.word	0x08002351
 8002314:	0800233d 	.word	0x0800233d
 8002318:	08002351 	.word	0x08002351
 800231c:	08002351 	.word	0x08002351
 8002320:	08002351 	.word	0x08002351
 8002324:	08002347 	.word	0x08002347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	60fb      	str	r3, [r7, #12]

      break;
 8002330:	e00f      	b.n	8002352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	60fb      	str	r3, [r7, #12]

      break;
 800233a:	e00a      	b.n	8002352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	60fb      	str	r3, [r7, #12]

      break;
 8002344:	e005      	b.n	8002352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	60fb      	str	r3, [r7, #12]

      break;
 800234e:	e000      	b.n	8002352 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002350:	bf00      	nop
  }

  return tmpreg;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <TIM_Base_SetConfig+0x114>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d013      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d00f      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <TIM_Base_SetConfig+0x118>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00b      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3c      	ldr	r2, [pc, #240]	; (80024cc <TIM_Base_SetConfig+0x11c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3b      	ldr	r2, [pc, #236]	; (80024d0 <TIM_Base_SetConfig+0x120>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d003      	beq.n	80023f0 <TIM_Base_SetConfig+0x40>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a3a      	ldr	r2, [pc, #232]	; (80024d4 <TIM_Base_SetConfig+0x124>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d108      	bne.n	8002402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <TIM_Base_SetConfig+0x114>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d02b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002410:	d027      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <TIM_Base_SetConfig+0x118>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d023      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <TIM_Base_SetConfig+0x11c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d01f      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2a      	ldr	r2, [pc, #168]	; (80024d0 <TIM_Base_SetConfig+0x120>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a29      	ldr	r2, [pc, #164]	; (80024d4 <TIM_Base_SetConfig+0x124>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d017      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a28      	ldr	r2, [pc, #160]	; (80024d8 <TIM_Base_SetConfig+0x128>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a27      	ldr	r2, [pc, #156]	; (80024dc <TIM_Base_SetConfig+0x12c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00f      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <TIM_Base_SetConfig+0x130>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00b      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <TIM_Base_SetConfig+0x134>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <TIM_Base_SetConfig+0x138>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_Base_SetConfig+0xb2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a23      	ldr	r2, [pc, #140]	; (80024ec <TIM_Base_SetConfig+0x13c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d108      	bne.n	8002474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <TIM_Base_SetConfig+0x114>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0xf8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <TIM_Base_SetConfig+0x124>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800
 80024d0:	40000c00 	.word	0x40000c00
 80024d4:	40010400 	.word	0x40010400
 80024d8:	40014000 	.word	0x40014000
 80024dc:	40014400 	.word	0x40014400
 80024e0:	40014800 	.word	0x40014800
 80024e4:	40001800 	.word	0x40001800
 80024e8:	40001c00 	.word	0x40001c00
 80024ec:	40002000 	.word	0x40002000

080024f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0201 	bic.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f023 0302 	bic.w	r3, r3, #2
 8002538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <TIM_OC1_SetConfig+0xd8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d003      	beq.n	8002554 <TIM_OC1_SetConfig+0x64>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a1f      	ldr	r2, [pc, #124]	; (80025cc <TIM_OC1_SetConfig+0xdc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10c      	bne.n	800256e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0308 	bic.w	r3, r3, #8
 800255a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <TIM_OC1_SetConfig+0xd8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d003      	beq.n	800257e <TIM_OC1_SetConfig+0x8e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <TIM_OC1_SetConfig+0xdc>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800258c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685a      	ldr	r2, [r3, #4]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	621a      	str	r2, [r3, #32]
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40010400 	.word	0x40010400

080025d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0210 	bic.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f023 0320 	bic.w	r3, r3, #32
 800261a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a22      	ldr	r2, [pc, #136]	; (80026b4 <TIM_OC2_SetConfig+0xe4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_OC2_SetConfig+0x68>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <TIM_OC2_SetConfig+0xe8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d10d      	bne.n	8002654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800263e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <TIM_OC2_SetConfig+0xe4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d003      	beq.n	8002664 <TIM_OC2_SetConfig+0x94>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a16      	ldr	r2, [pc, #88]	; (80026b8 <TIM_OC2_SetConfig+0xe8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d113      	bne.n	800268c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800266a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002672:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4313      	orrs	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	621a      	str	r2, [r3, #32]
}
 80026a6:	bf00      	nop
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40010400 	.word	0x40010400

080026bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0303 	bic.w	r3, r3, #3
 80026f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <TIM_OC3_SetConfig+0xe0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <TIM_OC3_SetConfig+0x66>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <TIM_OC3_SetConfig+0xe4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d10d      	bne.n	800273e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002728:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800273c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a16      	ldr	r2, [pc, #88]	; (800279c <TIM_OC3_SetConfig+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC3_SetConfig+0x92>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <TIM_OC3_SetConfig+0xe4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d113      	bne.n	8002776 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800275c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40010000 	.word	0x40010000
 80027a0:	40010400 	.word	0x40010400

080027a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	021b      	lsls	r3, r3, #8
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	031b      	lsls	r3, r3, #12
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <TIM_OC4_SetConfig+0xa4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_OC4_SetConfig+0x68>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a11      	ldr	r2, [pc, #68]	; (800284c <TIM_OC4_SetConfig+0xa8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d109      	bne.n	8002820 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	019b      	lsls	r3, r3, #6
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	621a      	str	r2, [r3, #32]
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40010400 	.word	0x40010400

08002850 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	2201      	movs	r2, #1
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1a      	ldr	r2, [r3, #32]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 031f 	and.w	r3, r3, #31
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]
}
 800288e:	bf00      	nop
 8002890:	371c      	adds	r7, #28
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e03f      	b.n	8002954 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7fe f86b 	bl	80009c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2224      	movs	r2, #36	; 0x24
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002904:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f828 	bl	800295c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800291a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800292a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800295c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002960:	b0c0      	sub	sp, #256	; 0x100
 8002962:	af00      	add	r7, sp, #0
 8002964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	68d9      	ldr	r1, [r3, #12]
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	ea40 0301 	orr.w	r3, r0, r1
 8002984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	431a      	orrs	r2, r3
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029b4:	f021 010c 	bic.w	r1, r1, #12
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029c2:	430b      	orrs	r3, r1
 80029c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	6999      	ldr	r1, [r3, #24]
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	ea40 0301 	orr.w	r3, r0, r1
 80029e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b8f      	ldr	r3, [pc, #572]	; (8002c28 <UART_SetConfig+0x2cc>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d005      	beq.n	80029fc <UART_SetConfig+0xa0>
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8d      	ldr	r3, [pc, #564]	; (8002c2c <UART_SetConfig+0x2d0>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d104      	bne.n	8002a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029fc:	f7fe fcc0 	bl	8001380 <HAL_RCC_GetPCLK2Freq>
 8002a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a04:	e003      	b.n	8002a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a06:	f7fe fca7 	bl	8001358 <HAL_RCC_GetPCLK1Freq>
 8002a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	f040 810c 	bne.w	8002c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	1891      	adds	r1, r2, r2
 8002a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a36:	415b      	adcs	r3, r3
 8002a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a3e:	4621      	mov	r1, r4
 8002a40:	eb12 0801 	adds.w	r8, r2, r1
 8002a44:	4629      	mov	r1, r5
 8002a46:	eb43 0901 	adc.w	r9, r3, r1
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5e:	4690      	mov	r8, r2
 8002a60:	4699      	mov	r9, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	eb18 0303 	adds.w	r3, r8, r3
 8002a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	eb49 0303 	adc.w	r3, r9, r3
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	18db      	adds	r3, r3, r3
 8002a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a90:	4613      	mov	r3, r2
 8002a92:	eb42 0303 	adc.w	r3, r2, r3
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
 8002a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aa0:	f7fd fbb0 	bl	8000204 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	011c      	lsls	r4, r3, #4
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002acc:	415b      	adcs	r3, r3
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8002ada:	4649      	mov	r1, r9
 8002adc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af4:	4692      	mov	sl, r2
 8002af6:	469b      	mov	fp, r3
 8002af8:	4643      	mov	r3, r8
 8002afa:	eb1a 0303 	adds.w	r3, sl, r3
 8002afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b02:	464b      	mov	r3, r9
 8002b04:	eb4b 0303 	adc.w	r3, fp, r3
 8002b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b20:	460b      	mov	r3, r1
 8002b22:	18db      	adds	r3, r3, r3
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
 8002b26:	4613      	mov	r3, r2
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b36:	f7fd fb65 	bl	8000204 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002b42:	fba3 2301 	umull	r2, r3, r3, r1
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	; 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002b58:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b64:	441c      	add	r4, r3
 8002b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b80:	415b      	adcs	r3, r3
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b88:	4641      	mov	r1, r8
 8002b8a:	1851      	adds	r1, r2, r1
 8002b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b8e:	4649      	mov	r1, r9
 8002b90:	414b      	adcs	r3, r1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4651      	mov	r1, sl
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bdc:	460b      	mov	r3, r1
 8002bde:	18db      	adds	r3, r3, r3
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be2:	4613      	mov	r3, r2
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bf2:	f7fd fb07 	bl	8000204 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	2164      	movs	r1, #100	; 0x64
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	3332      	adds	r3, #50	; 0x32
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	f003 0207 	and.w	r2, r3, #7
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4422      	add	r2, r4
 8002c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c24:	e106      	b.n	8002e34 <UART_SetConfig+0x4d8>
 8002c26:	bf00      	nop
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40011400 	.word	0x40011400
 8002c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c46:	4642      	mov	r2, r8
 8002c48:	464b      	mov	r3, r9
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	6239      	str	r1, [r7, #32]
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c56:	4641      	mov	r1, r8
 8002c58:	1854      	adds	r4, r2, r1
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	eb43 0501 	adc.w	r5, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	00eb      	lsls	r3, r5, #3
 8002c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6e:	00e2      	lsls	r2, r4, #3
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	18e3      	adds	r3, r4, r3
 8002c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	eb45 0303 	adc.w	r3, r5, r3
 8002c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	008b      	lsls	r3, r1, #2
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cac:	4621      	mov	r1, r4
 8002cae:	008a      	lsls	r2, r1, #2
 8002cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cb4:	f7fd faa6 	bl	8000204 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	011c      	lsls	r4, r3, #4
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	61b9      	str	r1, [r7, #24]
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	4641      	mov	r1, r8
 8002cea:	1851      	adds	r1, r2, r1
 8002cec:	6139      	str	r1, [r7, #16]
 8002cee:	4649      	mov	r1, r9
 8002cf0:	414b      	adcs	r3, r1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d00:	4659      	mov	r1, fp
 8002d02:	00cb      	lsls	r3, r1, #3
 8002d04:	4651      	mov	r1, sl
 8002d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	00ca      	lsls	r2, r1, #3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	4642      	mov	r2, r8
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	460a      	mov	r2, r1
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d40:	4649      	mov	r1, r9
 8002d42:	008b      	lsls	r3, r1, #2
 8002d44:	4641      	mov	r1, r8
 8002d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	008a      	lsls	r2, r1, #2
 8002d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d52:	f7fd fa57 	bl	8000204 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2264      	movs	r2, #100	; 0x64
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	1acb      	subs	r3, r1, r3
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	3332      	adds	r3, #50	; 0x32
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	441c      	add	r4, r3
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	673b      	str	r3, [r7, #112]	; 0x70
 8002d86:	677a      	str	r2, [r7, #116]	; 0x74
 8002d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	415b      	adcs	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	1851      	adds	r1, r2, r1
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	4649      	mov	r1, r9
 8002da4:	414b      	adcs	r3, r1
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002db4:	4659      	mov	r1, fp
 8002db6:	00cb      	lsls	r3, r1, #3
 8002db8:	4651      	mov	r1, sl
 8002dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	00ca      	lsls	r2, r1, #3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4642      	mov	r2, r8
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dce:	464b      	mov	r3, r9
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	eb42 0303 	adc.w	r3, r2, r3
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	663b      	str	r3, [r7, #96]	; 0x60
 8002de2:	667a      	str	r2, [r7, #100]	; 0x64
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002df0:	4649      	mov	r1, r9
 8002df2:	008b      	lsls	r3, r1, #2
 8002df4:	4641      	mov	r1, r8
 8002df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	008a      	lsls	r2, r1, #2
 8002dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e02:	f7fd f9ff 	bl	8000204 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4422      	add	r2, r4
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e40:	51eb851f 	.word	0x51eb851f

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4d0d      	ldr	r5, [pc, #52]	; (8002e7c <__libc_init_array+0x38>)
 8002e48:	4c0d      	ldr	r4, [pc, #52]	; (8002e80 <__libc_init_array+0x3c>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2600      	movs	r6, #0
 8002e50:	42a6      	cmp	r6, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	4d0b      	ldr	r5, [pc, #44]	; (8002e84 <__libc_init_array+0x40>)
 8002e56:	4c0c      	ldr	r4, [pc, #48]	; (8002e88 <__libc_init_array+0x44>)
 8002e58:	f000 f818 	bl	8002e8c <_init>
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	2600      	movs	r6, #0
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6c:	4798      	blx	r3
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e76:	4798      	blx	r3
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	08002ec4 	.word	0x08002ec4
 8002e80:	08002ec4 	.word	0x08002ec4
 8002e84:	08002ec4 	.word	0x08002ec4
 8002e88:	08002ec8 	.word	0x08002ec8

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
