
CAN_Loopback_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a90  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d14  08003d14  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d1c  08003d1c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000005c  08003d80  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08003d80  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a576  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b6  00000000  00000000  0002a645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000619  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022091  00000000  00000000  0002ce19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa4f  00000000  00000000  0004eeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ce2  00000000  00000000  000598f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002540  00000000  00000000  0012b5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0012db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c48 	.word	0x08003c48

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003c48 	.word	0x08003c48

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan);
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan);

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_Init();
 80005c0:	f000 fb80 	bl	8000cc4 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005c4:	2032      	movs	r0, #50	; 0x32
 80005c6:	f000 f89d 	bl	8000704 <SystemClock_Config_HSE>

	GPIO_Init();
 80005ca:	f000 f939 	bl	8000840 <GPIO_Init>

	UART2_Init();
 80005ce:	f000 f95b 	bl	8000888 <UART2_Init>

	CAN1_Init();
 80005d2:	f000 f861 	bl	8000698 <CAN1_Init>

	// Filters Configuration and Apply
	CAN_Filter_Config();
 80005d6:	f000 f817 	bl	8000608 <CAN_Filter_Config>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF ) != HAL_OK)
 80005da:	f240 4103 	movw	r1, #1027	; 0x403
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x48>)
 80005e0:	f000 ffef 	bl	80015c2 <HAL_CAN_ActivateNotification>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x32>
	{
		Error_handler();
 80005ea:	f000 fa0f 	bl	8000a0c <Error_handler>
	}

	// Starts Can ( Change from initialization to Normal Mode)
	if(HAL_CAN_Start(&hcan1)!= HAL_OK)
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <main+0x48>)
 80005f0:	f000 fdb6 	bl	8001160 <HAL_CAN_Start>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <main+0x42>
	{
		Error_handler();
 80005fa:	f000 fa07 	bl	8000a0c <Error_handler>
	}

	CAN1_TX();
 80005fe:	f000 f823 	bl	8000648 <CAN1_TX>


	while(1)
 8000602:	e7fe      	b.n	8000602 <main+0x46>
 8000604:	20000078 	.word	0x20000078

08000608 <CAN_Filter_Config>:


	return 0;
}
void CAN_Filter_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterIdHigh = 0x0;
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
    can1_filter_init.FilterIdLow =   0x0;
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
    can1_filter_init.FilterMaskIdHigh = 0x0;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
    can1_filter_init.FilterMaskIdLow = 0x0;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
    can1_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 800061e:	2301      	movs	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
   	can1_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000622:	2300      	movs	r3, #0
 8000624:	613b      	str	r3, [r7, #16]
   	can1_filter_init.FilterBank = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
   	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
   	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800062e:	2301      	movs	r3, #1
 8000630:	61fb      	str	r3, [r7, #28]

   	HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init);
 8000632:	463b      	mov	r3, r7
 8000634:	4619      	mov	r1, r3
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <CAN_Filter_Config+0x3c>)
 8000638:	f000 fcb2 	bl	8000fa0 <HAL_CAN_ConfigFilter>

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	; 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000078 	.word	0x20000078

08000648 <CAN1_TX>:
	//Send Msg to UART indicating Message Received
	sprintf(msg, "Message Received : %s\r\n", received_msg);
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
}
void CAN1_TX(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef Txheader;

	uint32_t TxMailbox;
	Txheader.DLC = 5;
 800064e:	2305      	movs	r3, #5
 8000650:	623b      	str	r3, [r7, #32]
	Txheader.StdId = 0x65D;
 8000652:	f240 635d 	movw	r3, #1629	; 0x65d
 8000656:	613b      	str	r3, [r7, #16]
	Txheader.IDE = CAN_ID_STD;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
	Txheader.RTR = CAN_RTR_DATA;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

	uint8_t CAN_msg[5] = {'H','E','L','L','O'};
 8000660:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <CAN1_TX+0x48>)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000668:	6018      	str	r0, [r3, #0]
 800066a:	3304      	adds	r3, #4
 800066c:	7019      	strb	r1, [r3, #0]
	if(HAL_CAN_AddTxMessage(&hcan1, &Txheader, CAN_msg, &TxMailbox) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	1d3a      	adds	r2, r7, #4
 8000674:	f107 0110 	add.w	r1, r7, #16
 8000678:	4806      	ldr	r0, [pc, #24]	; (8000694 <CAN1_TX+0x4c>)
 800067a:	f000 fdb5 	bl	80011e8 <HAL_CAN_AddTxMessage>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <CAN1_TX+0x40>
	{
		Error_handler();
 8000684:	f000 f9c2 	bl	8000a0c <Error_handler>

	//while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox) );



}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08003c78 	.word	0x08003c78
 8000694:	20000078 	.word	0x20000078

08000698 <CAN1_Init>:
void CAN1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <CAN1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <CAN1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <CAN1_Init+0x64>)
 80006a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a8:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <CAN1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <CAN1_Init+0x64>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <CAN1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <CAN1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode =  DISABLE;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <CAN1_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <CAN1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	775a      	strb	r2, [r3, #29]

	// CAN Setting for Bit Timings
	hcan1.Init.Prescaler = 5;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <CAN1_Init+0x64>)
 80006d0:	2205      	movs	r2, #5
 80006d2:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <CAN1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <CAN1_Init+0x64>)
 80006dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80006e0:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <CAN1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
	if(HAL_CAN_Init(&hcan1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <CAN1_Init+0x64>)
 80006ea:	f000 fb5d 	bl	8000da8 <HAL_CAN_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <CAN1_Init+0x60>
	{
		Error_handler();
 80006f4:	f000 f98a 	bl	8000a0c <Error_handler>
	}
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000078 	.word	0x20000078
 8000700:	40006400 	.word	0x40006400

08000704 <SystemClock_Config_HSE>:

void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	; 0x58
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 800070e:	2300      	movs	r3, #0
 8000710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI ;
 8000714:	2307      	movs	r3, #7
 8000716:	61fb      	str	r3, [r7, #28]
	Osc_Init.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	623b      	str	r3, [r7, #32]
	Osc_Init.LSEState = RCC_LSE_ON;
 800071e:	2301      	movs	r3, #1
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.HSIState = RCC_HSI_ON;
 8000722:	2301      	movs	r3, #1
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38

	switch(clock_freq)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b78      	cmp	r3, #120	; 0x78
 8000734:	d038      	beq.n	80007a8 <SystemClock_Config_HSE+0xa4>
 8000736:	2b78      	cmp	r3, #120	; 0x78
 8000738:	dc7c      	bgt.n	8000834 <SystemClock_Config_HSE+0x130>
 800073a:	2b32      	cmp	r3, #50	; 0x32
 800073c:	d002      	beq.n	8000744 <SystemClock_Config_HSE+0x40>
 800073e:	2b54      	cmp	r3, #84	; 0x54
 8000740:	d019      	beq.n	8000776 <SystemClock_Config_HSE+0x72>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 8000742:	e077      	b.n	8000834 <SystemClock_Config_HSE+0x130>
		  Osc_Init.PLL.PLLM = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 50;
 8000748:	2332      	movs	r3, #50	; 0x32
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000754:	2302      	movs	r3, #2
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
          flash_latency = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 8000774:	e032      	b.n	80007dc <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 8000776:	2304      	movs	r3, #4
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 84;
 800077a:	2354      	movs	r3, #84	; 0x54
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 800077e:	2302      	movs	r3, #2
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	230f      	movs	r3, #15
 800078c:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078e:	2302      	movs	r3, #2
 8000790:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079a:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
          flash_latency = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80007a6:	e019      	b.n	80007dc <SystemClock_Config_HSE+0xd8>
		  Osc_Init.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		  Osc_Init.PLL.PLLN = 120;
 80007ac:	2378      	movs	r3, #120	; 0x78
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60bb      	str	r3, [r7, #8]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007cc:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	61bb      	str	r3, [r7, #24]
          flash_latency = 3;
 80007d4:	2303      	movs	r3, #3
 80007d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 80007da:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 ff35 	bl	8002650 <HAL_RCC_OscConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config_HSE+0xec>
	{
			Error_handler();
 80007ec:	f000 f90e 	bl	8000a0c <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 80007f0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fbde 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config_HSE+0x106>
	{
		Error_handler();
 8000806:	f000 f901 	bl	8000a0c <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 800080a:	f001 fcbd 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 800080e:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 8000810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000812:	4a0a      	ldr	r2, [pc, #40]	; (800083c <SystemClock_Config_HSE+0x138>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	099b      	lsrs	r3, r3, #6
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fa03 	bl	8001c26 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000820:	2004      	movs	r0, #4
 8000822:	f001 fa0d 	bl	8001c40 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	f04f 30ff 	mov.w	r0, #4294967295
 800082e:	f001 f9d0 	bl	8001bd2 <HAL_NVIC_SetPriority>
 8000832:	e000      	b.n	8000836 <SystemClock_Config_HSE+0x132>
	   return ;
 8000834:	bf00      	nop



 }
 8000836:	3758      	adds	r7, #88	; 0x58
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	10624dd3 	.word	0x10624dd3

08000840 <GPIO_Init>:

void GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <GPIO_Init+0x40>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <GPIO_Init+0x40>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <GPIO_Init+0x40>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 8000862:	2320      	movs	r3, #32
 8000864:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000866:	2301      	movs	r3, #1
 8000868:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <GPIO_Init+0x44>)
 8000874:	f001 fa0e 	bl	8001c94 <HAL_GPIO_Init>
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000

08000888 <UART2_Init>:


void UART2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800088c:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <UART2_Init+0x44>)
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <UART2_Init+0x48>)
 8000890:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <UART2_Init+0x44>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <UART2_Init+0x44>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <UART2_Init+0x44>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <UART2_Init+0x44>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <UART2_Init+0x44>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <UART2_Init+0x44>)
 80008b4:	220c      	movs	r2, #12
 80008b6:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80008b8:	4804      	ldr	r0, [pc, #16]	; (80008cc <UART2_Init+0x44>)
 80008ba:	f002 f967 	bl	8002b8c <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 80008c4:	f000 f8a2 	bl	8000a0c <Error_handler>
	}


}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000a0 	.word	0x200000a0
 80008d0:	40004400 	.word	0x40004400

080008d4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b090      	sub	sp, #64	; 0x40
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message TransmittedM0\r\n");
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	490a      	ldr	r1, [pc, #40]	; (800090c <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fd14 	bl	8003310 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc8f 	bl	8000210 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 010c 	add.w	r1, r7, #12
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	4804      	ldr	r0, [pc, #16]	; (8000910 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000900:	f002 f991 	bl	8002c26 <HAL_UART_Transmit>
}
 8000904:	bf00      	nop
 8000906:	3740      	adds	r7, #64	; 0x40
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	08003c80 	.word	0x08003c80
 8000910:	200000a0 	.word	0x200000a0

08000914 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b090      	sub	sp, #64	; 0x40
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message TransmittedM1\r\n");
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	490a      	ldr	r1, [pc, #40]	; (800094c <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fcf4 	bl	8003310 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc6f 	bl	8000210 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	b29a      	uxth	r2, r3
 8000936:	f107 010c 	add.w	r1, r7, #12
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000940:	f002 f971 	bl	8002c26 <HAL_UART_Transmit>
}
 8000944:	bf00      	nop
 8000946:	3740      	adds	r7, #64	; 0x40
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08003c98 	.word	0x08003c98
 8000950:	200000a0 	.word	0x200000a0

08000954 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b090      	sub	sp, #64	; 0x40
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg, "Message TransmittedM2\r\n");
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	490a      	ldr	r1, [pc, #40]	; (800098c <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000962:	4618      	mov	r0, r3
 8000964:	f002 fcd4 	bl	8003310 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fc4f 	bl	8000210 <strlen>
 8000972:	4603      	mov	r3, r0
 8000974:	b29a      	uxth	r2, r3
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000980:	f002 f951 	bl	8002c26 <HAL_UART_Transmit>
}
 8000984:	bf00      	nop
 8000986:	3740      	adds	r7, #64	; 0x40
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08003cb0 	.word	0x08003cb0
 8000990:	200000a0 	.word	0x200000a0

08000994 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b098      	sub	sp, #96	; 0x60
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	char msg[50];

	// Wat until for FIFO has a message to be received

	// Gets the CAN message from FIFO 0
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, received_msg) != HAL_OK)
 800099c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009a4:	2100      	movs	r1, #0
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80009a8:	f000 fcf9 	bl	800139e <HAL_CAN_GetRxMessage>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		Error_handler();
 80009b2:	f000 f82b 	bl	8000a0c <Error_handler>
	}

	//Send Msg to UART indicating Message Received
	sprintf(msg, "Message Received : %s\r\n", received_msg);
 80009b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	490c      	ldr	r1, [pc, #48]	; (80009f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fca5 	bl	8003310 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fc20 	bl	8000210 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f107 0108 	add.w	r1, r7, #8
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80009de:	f002 f922 	bl	8002c26 <HAL_UART_Transmit>
}
 80009e2:	bf00      	nop
 80009e4:	3760      	adds	r7, #96	; 0x60
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000078 	.word	0x20000078
 80009f0:	08003c60 	.word	0x08003c60
 80009f4:	200000a0 	.word	0x200000a0

080009f8 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <Error_handler>:



void Error_handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
	while(1);
 8000a10:	e7fe      	b.n	8000a10 <Error_handler+0x4>
	...

08000a14 <HAL_MspInit>:


#include "main.h"

void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f001 f8cf 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x40>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <HAL_MspInit+0x40>)
 8000a24:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000a28:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f06f 000b 	mvn.w	r0, #11
 8000a32:	f001 f8ce 	bl	8001bd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	f06f 000a 	mvn.w	r0, #10
 8000a3e:	f001 f8c8 	bl	8001bd2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	f06f 0009 	mvn.w	r0, #9
 8000a4a:	f001 f8c2 	bl	8001bd2 <HAL_NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 8000a98:	2304      	movs	r3, #4
 8000a9a:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ab4:	f001 f8ee 	bl	8001c94 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 8000ab8:	2308      	movs	r3, #8
 8000aba:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ac4:	f001 f8e6 	bl	8001c94 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ac8:	2026      	movs	r0, #38	; 0x26
 8000aca:	f001 f89e 	bl	8001c0a <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	2026      	movs	r0, #38	; 0x26
 8000ad4:	f001 f87d 	bl	8001bd2 <HAL_NVIC_SetPriority>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_CAN;

  __HAL_RCC_CAN1_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_CAN_MspInit+0x90>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <HAL_CAN_MspInit+0x90>)
 8000afa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_CAN_MspInit+0x90>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 // __HAL_RCC_GPIOA_CLK_ENABLE();

  gpio_CAN.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000b0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b10:	60fb      	str	r3, [r7, #12]
  gpio_CAN.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  gpio_CAN.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  gpio_CAN.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	61bb      	str	r3, [r7, #24]
  gpio_CAN.Alternate = GPIO_AF9_CAN1;
 8000b1e:	2309      	movs	r3, #9
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &gpio_CAN);
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	4619      	mov	r1, r3
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <HAL_CAN_MspInit+0x94>)
 8000b2a:	f001 f8b3 	bl	8001c94 <HAL_GPIO_Init>

 // For Interrupt Only
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000b2e:	2013      	movs	r0, #19
 8000b30:	f001 f86b 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b34:	2014      	movs	r0, #20
 8000b36:	f001 f868 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b3a:	2015      	movs	r0, #21
 8000b3c:	f001 f865 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000b40:	2016      	movs	r0, #22
 8000b42:	f001 f862 	bl	8001c0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	2013      	movs	r0, #19
 8000b4c:	f001 f841 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 15, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	210f      	movs	r1, #15
 8000b54:	2014      	movs	r0, #20
 8000b56:	f001 f83c 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 15, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	210f      	movs	r1, #15
 8000b5e:	2015      	movs	r0, #21
 8000b60:	f001 f837 	bl	8001bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 15, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	210f      	movs	r1, #15
 8000b68:	2016      	movs	r0, #22
 8000b6a:	f001 f832 	bl	8001bd2 <HAL_NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3720      	adds	r7, #32
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <SysTick_Handler>:
// #include "st32f4xx_hal.h"
#include "main.h"
extern TIM_HandleTypeDef htimer2;
extern CAN_HandleTypeDef hcan1;
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000b84:	f000 f8f0 	bl	8000d68 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000b88:	f001 f876 	bl	8001c78 <HAL_SYSTICK_IRQHandler>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <CAN1_TX_IRQHandler>:


void CAN1_TX_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <CAN1_TX_IRQHandler+0x10>)
 8000b96:	f000 fd3a 	bl	800160e <HAL_CAN_IRQHandler>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000078 	.word	0x20000078

08000ba4 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <CAN1_RX0_IRQHandler+0x10>)
 8000baa:	f000 fd30 	bl	800160e <HAL_CAN_IRQHandler>
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000078 	.word	0x20000078

08000bb8 <CAN1_RX1_IRQHandler>:

void CAN1_RX1_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <CAN1_RX1_IRQHandler+0x10>)
 8000bbe:	f000 fd26 	bl	800160e <HAL_CAN_IRQHandler>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000078 	.word	0x20000078

08000bcc <CAN1_SCE_IRQHandler>:

void CAN1_SCE_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&hcan1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <CAN1_SCE_IRQHandler+0x10>)
 8000bd2:	f000 fd1c 	bl	800160e <HAL_CAN_IRQHandler>
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000078 	.word	0x20000078

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f002 fb9e 	bl	8003350 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20020000 	.word	0x20020000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	200000e4 	.word	0x200000e4
 8000c48:	20000238 	.word	0x20000238

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f002 fb5d 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fc8b 	bl	80005bc <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cb4:	08003d24 	.word	0x08003d24
  ldr r2, =_sbss
 8000cb8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cbc:	20000234 	.word	0x20000234

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 ff65 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff fe8c 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 ff7d 	bl	8001c26 <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 ff45 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200000e8 	.word	0x200000e8

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200000e8 	.word	0x200000e8

08000da8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0ed      	b.n	8000f96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d102      	bne.n	8000dcc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff fe8e 	bl	8000ae8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0201 	orr.w	r2, r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ddc:	f7ff ffd8 	bl	8000d90 <HAL_GetTick>
 8000de0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000de2:	e012      	b.n	8000e0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de4:	f7ff ffd4 	bl	8000d90 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b0a      	cmp	r3, #10
 8000df0:	d90b      	bls.n	8000e0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2205      	movs	r2, #5
 8000e02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e0c5      	b.n	8000f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0e5      	beq.n	8000de4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 0202 	bic.w	r2, r2, #2
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e28:	f7ff ffb2 	bl	8000d90 <HAL_GetTick>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e2e:	e012      	b.n	8000e56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e30:	f7ff ffae 	bl	8000d90 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b0a      	cmp	r3, #10
 8000e3c:	d90b      	bls.n	8000e56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2205      	movs	r2, #5
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e09f      	b.n	8000f96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e5      	bne.n	8000e30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7e1b      	ldrb	r3, [r3, #24]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d108      	bne.n	8000e7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e007      	b.n	8000e8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7e5b      	ldrb	r3, [r3, #25]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d108      	bne.n	8000ea8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e007      	b.n	8000eb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	7e9b      	ldrb	r3, [r3, #26]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d108      	bne.n	8000ed2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e007      	b.n	8000ee2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0220 	bic.w	r2, r2, #32
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7edb      	ldrb	r3, [r3, #27]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f022 0210 	bic.w	r2, r2, #16
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	e007      	b.n	8000f0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 0210 	orr.w	r2, r2, #16
 8000f0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7f1b      	ldrb	r3, [r3, #28]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d108      	bne.n	8000f26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0208 	orr.w	r2, r2, #8
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	e007      	b.n	8000f36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7f5b      	ldrb	r3, [r3, #29]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d108      	bne.n	8000f50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0204 	orr.w	r2, r2, #4
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 0204 	bic.w	r2, r2, #4
 8000f5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	ea42 0103 	orr.w	r1, r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fb8:	7cfb      	ldrb	r3, [r7, #19]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d003      	beq.n	8000fc6 <HAL_CAN_ConfigFilter+0x26>
 8000fbe:	7cfb      	ldrb	r3, [r7, #19]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	f040 80be 	bne.w	8001142 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <HAL_CAN_ConfigFilter+0x1bc>)
 8000fc8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fd0:	f043 0201 	orr.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fe0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f003 031f 	and.w	r3, r3, #31
 8001006:	2201      	movs	r2, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d123      	bne.n	8001070 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800104a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3248      	adds	r2, #72	; 0x48
 8001050:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001064:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001066:	6979      	ldr	r1, [r7, #20]
 8001068:	3348      	adds	r3, #72	; 0x48
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	440b      	add	r3, r1
 800106e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d122      	bne.n	80010be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	431a      	orrs	r2, r3
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001098:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3248      	adds	r2, #72	; 0x48
 800109e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b4:	6979      	ldr	r1, [r7, #20]
 80010b6:	3348      	adds	r3, #72	; 0x48
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010d8:	e007      	b.n	80010ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001104:	e007      	b.n	8001116 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	431a      	orrs	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d107      	bne.n	800112e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	431a      	orrs	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001134:	f023 0201 	bic.w	r2, r3, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e006      	b.n	8001150 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
  }
}
 8001150:	4618      	mov	r0, r3
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40006400 	.word	0x40006400

08001160 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d12e      	bne.n	80011d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0201 	bic.w	r2, r2, #1
 800118a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800118c:	f7ff fe00 	bl	8000d90 <HAL_GetTick>
 8001190:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001192:	e012      	b.n	80011ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001194:	f7ff fdfc 	bl	8000d90 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	d90b      	bls.n	80011ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2205      	movs	r2, #5
 80011b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e012      	b.n	80011e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1e5      	bne.n	8001194 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e006      	b.n	80011e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001206:	7ffb      	ldrb	r3, [r7, #31]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d003      	beq.n	8001214 <HAL_CAN_AddTxMessage+0x2c>
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	2b02      	cmp	r3, #2
 8001210:	f040 80b8 	bne.w	8001384 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001224:	2b00      	cmp	r3, #0
 8001226:	d105      	bne.n	8001234 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800122e:	2b00      	cmp	r3, #0
 8001230:	f000 80a0 	beq.w	8001374 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	0e1b      	lsrs	r3, r3, #24
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d907      	bls.n	8001254 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e09e      	b.n	8001392 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001254:	2201      	movs	r2, #1
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	409a      	lsls	r2, r3
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10d      	bne.n	8001282 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001270:	68f9      	ldr	r1, [r7, #12]
 8001272:	6809      	ldr	r1, [r1, #0]
 8001274:	431a      	orrs	r2, r3
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3318      	adds	r3, #24
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	440b      	add	r3, r1
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e00f      	b.n	80012a2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800128c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001292:	68f9      	ldr	r1, [r7, #12]
 8001294:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001296:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3318      	adds	r3, #24
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	440b      	add	r3, r1
 80012a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	691a      	ldr	r2, [r3, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3318      	adds	r3, #24
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	440b      	add	r3, r1
 80012b2:	3304      	adds	r3, #4
 80012b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	7d1b      	ldrb	r3, [r3, #20]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d111      	bne.n	80012e2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3318      	adds	r3, #24
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	4413      	add	r3, r2
 80012ca:	3304      	adds	r3, #4
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	6811      	ldr	r1, [r2, #0]
 80012d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3318      	adds	r3, #24
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	3304      	adds	r3, #4
 80012e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3307      	adds	r3, #7
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	061a      	lsls	r2, r3, #24
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3306      	adds	r3, #6
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3305      	adds	r3, #5
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4313      	orrs	r3, r2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	3204      	adds	r2, #4
 8001302:	7812      	ldrb	r2, [r2, #0]
 8001304:	4610      	mov	r0, r2
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	ea43 0200 	orr.w	r2, r3, r0
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	440b      	add	r3, r1
 8001314:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001318:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3303      	adds	r3, #3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	061a      	lsls	r2, r3, #24
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3302      	adds	r3, #2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	041b      	lsls	r3, r3, #16
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3301      	adds	r3, #1
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	4313      	orrs	r3, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	4610      	mov	r0, r2
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	6811      	ldr	r1, [r2, #0]
 8001340:	ea43 0200 	orr.w	r2, r3, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	011b      	lsls	r3, r3, #4
 8001348:	440b      	add	r3, r1
 800134a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800134e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3318      	adds	r3, #24
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	6811      	ldr	r1, [r2, #0]
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3318      	adds	r3, #24
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	440b      	add	r3, r1
 800136e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	e00e      	b.n	8001392 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e006      	b.n	8001392 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
  }
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800139e:	b480      	push	{r7}
 80013a0:	b087      	sub	sp, #28
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d003      	beq.n	80013c2 <HAL_CAN_GetRxMessage+0x24>
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	f040 80f3 	bne.w	80015a8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10e      	bne.n	80013e6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d116      	bne.n	8001404 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0e7      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d107      	bne.n	8001404 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0d8      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	331b      	adds	r3, #27
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0204 	and.w	r2, r3, #4
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10c      	bne.n	800143c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	331b      	adds	r3, #27
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0d5b      	lsrs	r3, r3, #21
 8001432:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	e00b      	b.n	8001454 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	331b      	adds	r3, #27
 8001444:	011b      	lsls	r3, r3, #4
 8001446:	4413      	add	r3, r2
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	331b      	adds	r3, #27
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4413      	add	r3, r2
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0202 	and.w	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 020f 	and.w	r2, r3, #15
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	331b      	adds	r3, #27
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	4413      	add	r3, r2
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	b2da      	uxtb	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	331b      	adds	r3, #27
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	4413      	add	r3, r2
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	4413      	add	r3, r2
 80014bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0a1a      	lsrs	r2, r3, #8
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	4413      	add	r3, r2
 80014ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	0c1a      	lsrs	r2, r3, #16
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	3302      	adds	r3, #2
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	4413      	add	r3, r2
 8001506:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	0e1a      	lsrs	r2, r3, #24
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	3303      	adds	r3, #3
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4413      	add	r3, r2
 8001520:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3304      	adds	r3, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4413      	add	r3, r2
 8001538:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0a1a      	lsrs	r2, r3, #8
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3305      	adds	r3, #5
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	4413      	add	r3, r2
 8001552:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	0c1a      	lsrs	r2, r3, #16
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	3306      	adds	r3, #6
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	4413      	add	r3, r2
 800156c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	0e1a      	lsrs	r2, r3, #24
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3307      	adds	r3, #7
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d108      	bne.n	8001594 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0220 	orr.w	r2, r2, #32
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e007      	b.n	80015a4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e006      	b.n	80015b6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
  }
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d002      	beq.n	80015e0 <HAL_CAN_ActivateNotification+0x1e>
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d109      	bne.n	80015f4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6959      	ldr	r1, [r3, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e006      	b.n	8001602 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
  }
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b08a      	sub	sp, #40	; 0x28
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d07c      	beq.n	800174e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d023      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff f92f 	bl	80008d4 <HAL_CAN_TxMailbox0CompleteCallback>
 8001676:	e016      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
 800168a:	e00c      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
 800169e:	e002      	b.n	80016a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 f96b 	bl	800197c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d024      	beq.n	80016fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff f925 	bl	8000914 <HAL_CAN_TxMailbox1CompleteCallback>
 80016ca:	e016      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d004      	beq.n	80016e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
 80016de:	e00c      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d004      	beq.n	80016f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	e002      	b.n	80016fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f000 f94b 	bl	8001990 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d024      	beq.n	800174e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800170c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff f91b 	bl	8000954 <HAL_CAN_TxMailbox2CompleteCallback>
 800171e:	e016      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
 8001732:	e00c      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	e002      	b.n	800174e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f92b 	bl	80019a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800174e:	6a3b      	ldr	r3, [r7, #32]
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00c      	beq.n	8001772 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0310 	and.w	r3, r3, #16
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2210      	movs	r2, #16
 8001770:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2208      	movs	r2, #8
 800178c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f912 	bl	80019b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d009      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff f8f1 	bl	8000994 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00c      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017d6:	6a3b      	ldr	r3, [r7, #32]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2208      	movs	r2, #8
 80017f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8f4 	bl	80019e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8db 	bl	80019cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00b      	beq.n	8001838 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2210      	movs	r2, #16
 8001830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8de 	bl	80019f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2208      	movs	r2, #8
 8001852:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f8d7 	bl	8001a08 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d07b      	beq.n	800195c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d072      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001890:	2b00      	cmp	r3, #0
 8001892:	d008      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018a6:	6a3b      	ldr	r3, [r7, #32]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d043      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03e      	beq.n	8001954 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018dc:	2b60      	cmp	r3, #96	; 0x60
 80018de:	d02b      	beq.n	8001938 <HAL_CAN_IRQHandler+0x32a>
 80018e0:	2b60      	cmp	r3, #96	; 0x60
 80018e2:	d82e      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018e4:	2b50      	cmp	r3, #80	; 0x50
 80018e6:	d022      	beq.n	800192e <HAL_CAN_IRQHandler+0x320>
 80018e8:	2b50      	cmp	r3, #80	; 0x50
 80018ea:	d82a      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018ec:	2b40      	cmp	r3, #64	; 0x40
 80018ee:	d019      	beq.n	8001924 <HAL_CAN_IRQHandler+0x316>
 80018f0:	2b40      	cmp	r3, #64	; 0x40
 80018f2:	d826      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018f4:	2b30      	cmp	r3, #48	; 0x30
 80018f6:	d010      	beq.n	800191a <HAL_CAN_IRQHandler+0x30c>
 80018f8:	2b30      	cmp	r3, #48	; 0x30
 80018fa:	d822      	bhi.n	8001942 <HAL_CAN_IRQHandler+0x334>
 80018fc:	2b10      	cmp	r3, #16
 80018fe:	d002      	beq.n	8001906 <HAL_CAN_IRQHandler+0x2f8>
 8001900:	2b20      	cmp	r3, #32
 8001902:	d005      	beq.n	8001910 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001904:	e01d      	b.n	8001942 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800190e:	e019      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001918:	e014      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f043 0320 	orr.w	r3, r3, #32
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001922:	e00f      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800192c:	e00a      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001936:	e005      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001940:	e000      	b.n	8001944 <HAL_CAN_IRQHandler+0x336>
            break;
 8001942:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	699a      	ldr	r2, [r3, #24]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001952:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2204      	movs	r2, #4
 800195a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff f842 	bl	80009f8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db0b      	blt.n	8001aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4907      	ldr	r1, [pc, #28]	; (8001ab8 <__NVIC_EnableIRQ+0x38>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100

08001abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	6039      	str	r1, [r7, #0]
 8001ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	db0a      	blt.n	8001ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	490c      	ldr	r1, [pc, #48]	; (8001b08 <__NVIC_SetPriority+0x4c>)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	440b      	add	r3, r1
 8001ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae4:	e00a      	b.n	8001afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4908      	ldr	r1, [pc, #32]	; (8001b0c <__NVIC_SetPriority+0x50>)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	3b04      	subs	r3, #4
 8001af4:	0112      	lsls	r2, r2, #4
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	761a      	strb	r2, [r3, #24]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000e100 	.word	0xe000e100
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	bf28      	it	cs
 8001b2e:	2304      	movcs	r3, #4
 8001b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3304      	adds	r3, #4
 8001b36:	2b06      	cmp	r3, #6
 8001b38:	d902      	bls.n	8001b40 <NVIC_EncodePriority+0x30>
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3b03      	subs	r3, #3
 8001b3e:	e000      	b.n	8001b42 <NVIC_EncodePriority+0x32>
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	f04f 32ff 	mov.w	r2, #4294967295
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	401a      	ands	r2, r3
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	43d9      	mvns	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	4313      	orrs	r3, r2
         );
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3724      	adds	r7, #36	; 0x24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff8e 	bl	8001abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff29 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff3e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff8e 	bl	8001b10 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5d 	bl	8001abc <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff31 	bl	8001a80 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d106      	bne.n	8001c5c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001c5a:	e005      	b.n	8001c68 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001c62:	f023 0304 	bic.w	r3, r3, #4
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001c7c:	f000 f802 	bl	8001c84 <HAL_SYSTICK_Callback>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
 8001cae:	e165      	b.n	8001f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	f040 8154 	bne.w	8001f76 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d005      	beq.n	8001ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d017      	beq.n	8001d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d123      	bne.n	8001dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	08da      	lsrs	r2, r3, #3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3208      	adds	r2, #8
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	08da      	lsrs	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	69b9      	ldr	r1, [r7, #24]
 8001dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80ae 	beq.w	8001f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a5c      	ldr	r2, [pc, #368]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_GPIO_Init+0x300>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4f      	ldr	r2, [pc, #316]	; (8001f9c <HAL_GPIO_Init+0x308>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x21a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <HAL_GPIO_Init+0x30c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x216>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4d      	ldr	r2, [pc, #308]	; (8001fa4 <HAL_GPIO_Init+0x310>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x212>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4c      	ldr	r2, [pc, #304]	; (8001fa8 <HAL_GPIO_Init+0x314>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x20e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4b      	ldr	r2, [pc, #300]	; (8001fac <HAL_GPIO_Init+0x318>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x20a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_GPIO_Init+0x31c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x206>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a49      	ldr	r2, [pc, #292]	; (8001fb4 <HAL_GPIO_Init+0x320>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x202>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00c      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e96:	2307      	movs	r3, #7
 8001e98:	e00a      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	e008      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e004      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e002      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x21c>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	69fa      	ldr	r2, [r7, #28]
 8001eb2:	f002 0203 	and.w	r2, r2, #3
 8001eb6:	0092      	lsls	r2, r2, #2
 8001eb8:	4093      	lsls	r3, r2
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec0:	4935      	ldr	r1, [pc, #212]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ece:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ef2:	4a31      	ldr	r2, [pc, #196]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f1c:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f22:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f46:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f70:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_GPIO_Init+0x324>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0f      	cmp	r3, #15
 8001f80:	f67f ae96 	bls.w	8001cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40013800 	.word	0x40013800
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40021400 	.word	0x40021400
 8001fb4:	40021800 	.word	0x40021800
 8001fb8:	40013c00 	.word	0x40013c00

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fe70 	bl	8000d90 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fe6c 	bl	8000d90 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f855 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fdd0 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	08003cc8 	.word	0x08003cc8
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021a4:	f7ff fff0 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0a9b      	lsrs	r3, r3, #10
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08003cd8 	.word	0x08003cd8

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021cc:	f7ff ffdc 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0b5b      	lsrs	r3, r3, #13
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4903      	ldr	r1, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08003cd8 	.word	0x08003cd8

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021f4:	b0ae      	sub	sp, #184	; 0xb8
 80021f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002216:	4bcb      	ldr	r3, [pc, #812]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b0c      	cmp	r3, #12
 8002220:	f200 8206 	bhi.w	8002630 <HAL_RCC_GetSysClockFreq+0x440>
 8002224:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	08002261 	.word	0x08002261
 8002230:	08002631 	.word	0x08002631
 8002234:	08002631 	.word	0x08002631
 8002238:	08002631 	.word	0x08002631
 800223c:	08002269 	.word	0x08002269
 8002240:	08002631 	.word	0x08002631
 8002244:	08002631 	.word	0x08002631
 8002248:	08002631 	.word	0x08002631
 800224c:	08002271 	.word	0x08002271
 8002250:	08002631 	.word	0x08002631
 8002254:	08002631 	.word	0x08002631
 8002258:	08002631 	.word	0x08002631
 800225c:	08002461 	.word	0x08002461
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002260:	4bb9      	ldr	r3, [pc, #740]	; (8002548 <HAL_RCC_GetSysClockFreq+0x358>)
 8002262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002266:	e1e7      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002268:	4bb8      	ldr	r3, [pc, #736]	; (800254c <HAL_RCC_GetSysClockFreq+0x35c>)
 800226a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800226e:	e1e3      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002270:	4bb4      	ldr	r3, [pc, #720]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227c:	4bb1      	ldr	r3, [pc, #708]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d071      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4bae      	ldr	r3, [pc, #696]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002294:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80022aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	f04f 0000 	mov.w	r0, #0
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c0:	0150      	lsls	r0, r2, #5
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4621      	mov	r1, r4
 80022c8:	1a51      	subs	r1, r2, r1
 80022ca:	6439      	str	r1, [r7, #64]	; 0x40
 80022cc:	4629      	mov	r1, r5
 80022ce:	eb63 0301 	sbc.w	r3, r3, r1
 80022d2:	647b      	str	r3, [r7, #68]	; 0x44
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80022e0:	4649      	mov	r1, r9
 80022e2:	018b      	lsls	r3, r1, #6
 80022e4:	4641      	mov	r1, r8
 80022e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ea:	4641      	mov	r1, r8
 80022ec:	018a      	lsls	r2, r1, #6
 80022ee:	4641      	mov	r1, r8
 80022f0:	1a51      	subs	r1, r2, r1
 80022f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80022f4:	4649      	mov	r1, r9
 80022f6:	eb63 0301 	sbc.w	r3, r3, r1
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002308:	4649      	mov	r1, r9
 800230a:	00cb      	lsls	r3, r1, #3
 800230c:	4641      	mov	r1, r8
 800230e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002312:	4641      	mov	r1, r8
 8002314:	00ca      	lsls	r2, r1, #3
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	4603      	mov	r3, r0
 800231c:	4622      	mov	r2, r4
 800231e:	189b      	adds	r3, r3, r2
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
 8002322:	462b      	mov	r3, r5
 8002324:	460a      	mov	r2, r1
 8002326:	eb42 0303 	adc.w	r3, r2, r3
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002338:	4629      	mov	r1, r5
 800233a:	024b      	lsls	r3, r1, #9
 800233c:	4621      	mov	r1, r4
 800233e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002342:	4621      	mov	r1, r4
 8002344:	024a      	lsls	r2, r1, #9
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002358:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800235c:	f7fd ffb0 	bl	80002c0 <__aeabi_uldivmod>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4613      	mov	r3, r2
 8002366:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800236a:	e067      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	099b      	lsrs	r3, r3, #6
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002378:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800237c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	67bb      	str	r3, [r7, #120]	; 0x78
 8002386:	2300      	movs	r3, #0
 8002388:	67fb      	str	r3, [r7, #124]	; 0x7c
 800238a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800238e:	4622      	mov	r2, r4
 8002390:	462b      	mov	r3, r5
 8002392:	f04f 0000 	mov.w	r0, #0
 8002396:	f04f 0100 	mov.w	r1, #0
 800239a:	0159      	lsls	r1, r3, #5
 800239c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023a0:	0150      	lsls	r0, r2, #5
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	4621      	mov	r1, r4
 80023a8:	1a51      	subs	r1, r2, r1
 80023aa:	62b9      	str	r1, [r7, #40]	; 0x28
 80023ac:	4629      	mov	r1, r5
 80023ae:	eb63 0301 	sbc.w	r3, r3, r1
 80023b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80023c0:	4649      	mov	r1, r9
 80023c2:	018b      	lsls	r3, r1, #6
 80023c4:	4641      	mov	r1, r8
 80023c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ca:	4641      	mov	r1, r8
 80023cc:	018a      	lsls	r2, r1, #6
 80023ce:	4641      	mov	r1, r8
 80023d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80023d4:	4649      	mov	r1, r9
 80023d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ee:	4692      	mov	sl, r2
 80023f0:	469b      	mov	fp, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	eb1a 0303 	adds.w	r3, sl, r3
 80023f8:	623b      	str	r3, [r7, #32]
 80023fa:	462b      	mov	r3, r5
 80023fc:	eb4b 0303 	adc.w	r3, fp, r3
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800240e:	4629      	mov	r1, r5
 8002410:	028b      	lsls	r3, r1, #10
 8002412:	4621      	mov	r1, r4
 8002414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002418:	4621      	mov	r1, r4
 800241a:	028a      	lsls	r2, r1, #10
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002424:	2200      	movs	r2, #0
 8002426:	673b      	str	r3, [r7, #112]	; 0x70
 8002428:	677a      	str	r2, [r7, #116]	; 0x74
 800242a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800242e:	f7fd ff47 	bl	80002c0 <__aeabi_uldivmod>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4613      	mov	r3, r2
 8002438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	3301      	adds	r3, #1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800244e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002452:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800245e:	e0eb      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002468:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d06b      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <HAL_RCC_GetSysClockFreq+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	099b      	lsrs	r3, r3, #6
 800247e:	2200      	movs	r2, #0
 8002480:	66bb      	str	r3, [r7, #104]	; 0x68
 8002482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002484:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248a:	663b      	str	r3, [r7, #96]	; 0x60
 800248c:	2300      	movs	r3, #0
 800248e:	667b      	str	r3, [r7, #100]	; 0x64
 8002490:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002494:	4622      	mov	r2, r4
 8002496:	462b      	mov	r3, r5
 8002498:	f04f 0000 	mov.w	r0, #0
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	0159      	lsls	r1, r3, #5
 80024a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a6:	0150      	lsls	r0, r2, #5
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4621      	mov	r1, r4
 80024ae:	1a51      	subs	r1, r2, r1
 80024b0:	61b9      	str	r1, [r7, #24]
 80024b2:	4629      	mov	r1, r5
 80024b4:	eb63 0301 	sbc.w	r3, r3, r1
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024c6:	4659      	mov	r1, fp
 80024c8:	018b      	lsls	r3, r1, #6
 80024ca:	4651      	mov	r1, sl
 80024cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d0:	4651      	mov	r1, sl
 80024d2:	018a      	lsls	r2, r1, #6
 80024d4:	4651      	mov	r1, sl
 80024d6:	ebb2 0801 	subs.w	r8, r2, r1
 80024da:	4659      	mov	r1, fp
 80024dc:	eb63 0901 	sbc.w	r9, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f4:	4690      	mov	r8, r2
 80024f6:	4699      	mov	r9, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	eb18 0303 	adds.w	r3, r8, r3
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	462b      	mov	r3, r5
 8002502:	eb49 0303 	adc.w	r3, r9, r3
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002514:	4629      	mov	r1, r5
 8002516:	024b      	lsls	r3, r1, #9
 8002518:	4621      	mov	r1, r4
 800251a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800251e:	4621      	mov	r1, r4
 8002520:	024a      	lsls	r2, r1, #9
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800252a:	2200      	movs	r2, #0
 800252c:	65bb      	str	r3, [r7, #88]	; 0x58
 800252e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002530:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002534:	f7fd fec4 	bl	80002c0 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002542:	e065      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x420>
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <HAL_RCC_GetSysClockFreq+0x458>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	099b      	lsrs	r3, r3, #6
 8002556:	2200      	movs	r2, #0
 8002558:	4618      	mov	r0, r3
 800255a:	4611      	mov	r1, r2
 800255c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002560:	653b      	str	r3, [r7, #80]	; 0x50
 8002562:	2300      	movs	r3, #0
 8002564:	657b      	str	r3, [r7, #84]	; 0x54
 8002566:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800256a:	4642      	mov	r2, r8
 800256c:	464b      	mov	r3, r9
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	0159      	lsls	r1, r3, #5
 8002578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800257c:	0150      	lsls	r0, r2, #5
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4641      	mov	r1, r8
 8002584:	1a51      	subs	r1, r2, r1
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	4649      	mov	r1, r9
 800258a:	eb63 0301 	sbc.w	r3, r3, r1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800259c:	4659      	mov	r1, fp
 800259e:	018b      	lsls	r3, r1, #6
 80025a0:	4651      	mov	r1, sl
 80025a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025a6:	4651      	mov	r1, sl
 80025a8:	018a      	lsls	r2, r1, #6
 80025aa:	4651      	mov	r1, sl
 80025ac:	1a54      	subs	r4, r2, r1
 80025ae:	4659      	mov	r1, fp
 80025b0:	eb63 0501 	sbc.w	r5, r3, r1
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	00eb      	lsls	r3, r5, #3
 80025be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025c2:	00e2      	lsls	r2, r4, #3
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
 80025c8:	4643      	mov	r3, r8
 80025ca:	18e3      	adds	r3, r4, r3
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	464b      	mov	r3, r9
 80025d0:	eb45 0303 	adc.w	r3, r5, r3
 80025d4:	607b      	str	r3, [r7, #4]
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025e2:	4629      	mov	r1, r5
 80025e4:	028b      	lsls	r3, r1, #10
 80025e6:	4621      	mov	r1, r4
 80025e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025ec:	4621      	mov	r1, r4
 80025ee:	028a      	lsls	r2, r1, #10
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025f8:	2200      	movs	r2, #0
 80025fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80025fc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80025fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002602:	f7fd fe5d 	bl	80002c0 <__aeabi_uldivmod>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4613      	mov	r3, r2
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_GetSysClockFreq+0x458>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	0f1b      	lsrs	r3, r3, #28
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800261e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800262e:	e003      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002636:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002638:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800263c:	4618      	mov	r0, r3
 800263e:	37b8      	adds	r7, #184	; 0xb8
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	00f42400 	.word	0x00f42400

08002650 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e28d      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8083 	beq.w	8002776 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002670:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b04      	cmp	r3, #4
 800267a:	d019      	beq.n	80026b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800267c:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002684:	2b08      	cmp	r3, #8
 8002686:	d106      	bne.n	8002696 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002688:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d112      	bne.n	80026c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	4b84      	ldr	r3, [pc, #528]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d05b      	beq.n	8002774 <HAL_RCC_OscConfig+0x124>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d157      	bne.n	8002774 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e25a      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x90>
 80026d2:	4b7c      	ldr	r3, [pc, #496]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7b      	ldr	r2, [pc, #492]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xcc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0xb4>
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a72      	ldr	r2, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xcc>
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6e      	ldr	r2, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6b      	ldr	r2, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7fe fb34 	bl	8000d90 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe fb30 	bl	8000d90 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e21f      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xdc>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fb20 	bl	8000d90 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002754:	f7fe fb1c 	bl	8000d90 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e20b      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x104>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d06f      	beq.n	8002862 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002782:	4b50      	ldr	r3, [pc, #320]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d017      	beq.n	80027be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800278e:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d105      	bne.n	80027a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x186>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1d3      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4937      	ldr	r1, [pc, #220]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x278>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe fac9 	bl	8000d90 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002802:	f7fe fac5 	bl	8000d90 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1b4      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4925      	ldr	r1, [pc, #148]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_OscConfig+0x278>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7fe faa8 	bl	8000d90 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002844:	f7fe faa4 	bl	8000d90 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e193      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x27c>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7fe fa88 	bl	8000d90 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe fa84 	bl	8000d90 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e173      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x274>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x234>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x27c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fa71 	bl	8000d90 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fe fa6d 	bl	8000d90 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d907      	bls.n	80028d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e15c      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b8a      	ldr	r3, [pc, #552]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ea      	bne.n	80028b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8097 	beq.w	8002a18 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b83      	ldr	r3, [pc, #524]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	4a7e      	ldr	r2, [pc, #504]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	; 0x40
 800290a:	4b7c      	ldr	r3, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_OscConfig+0x4b0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <HAL_RCC_OscConfig+0x4b0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a75      	ldr	r2, [pc, #468]	; (8002b00 <HAL_RCC_OscConfig+0x4b0>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe fa2d 	bl	8000d90 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7fe fa29 	bl	8000d90 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e118      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b6c      	ldr	r3, [pc, #432]	; (8002b00 <HAL_RCC_OscConfig+0x4b0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x31e>
 8002960:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a65      	ldr	r2, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x358>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x340>
 8002976:	4b61      	ldr	r3, [pc, #388]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a60      	ldr	r2, [pc, #384]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a5d      	ldr	r2, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x358>
 8002990:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a59      	ldr	r2, [pc, #356]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	4b57      	ldr	r3, [pc, #348]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a56      	ldr	r2, [pc, #344]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe f9ee 	bl	8000d90 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7fe f9ea 	bl	8000d90 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0d7      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b4b      	ldr	r3, [pc, #300]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x368>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe f9d8 	bl	8000d90 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe f9d4 	bl	8000d90 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0c1      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b3b      	ldr	r3, [pc, #236]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80ad 	beq.w	8002b7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d060      	beq.n	8002af0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d145      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b33      	ldr	r3, [pc, #204]	; (8002b04 <HAL_RCC_OscConfig+0x4b4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f9a8 	bl	8000d90 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe f9a4 	bl	8000d90 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e093      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	071b      	lsls	r3, r3, #28
 8002a8e:	491b      	ldr	r1, [pc, #108]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <HAL_RCC_OscConfig+0x4b4>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe f979 	bl	8000d90 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe f975 	bl	8000d90 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e064      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x452>
 8002ac0:	e05c      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_RCC_OscConfig+0x4b4>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe f962 	bl	8000d90 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe f95e 	bl	8000d90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e04d      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x480>
 8002aee:	e045      	b.n	8002b7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e040      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_RCC_OscConfig+0x538>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d030      	beq.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d129      	bne.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d122      	bne.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d119      	bne.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d10f      	bne.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d107      	bne.n	8002b78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3718      	adds	r7, #24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e03f      	b.n	8002c1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d106      	bne.n	8002bb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd ff50 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2224      	movs	r2, #36	; 0x24
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f929 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2220      	movs	r2, #32
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af02      	add	r7, sp, #8
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d17c      	bne.n	8002d40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_UART_Transmit+0x2c>
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e075      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Transmit+0x3e>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e06e      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2221      	movs	r2, #33	; 0x21
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe f889 	bl	8000d90 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	88fa      	ldrh	r2, [r7, #6]
 8002c84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	88fa      	ldrh	r2, [r7, #6]
 8002c8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c94:	d108      	bne.n	8002ca8 <HAL_UART_Transmit+0x82>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e003      	b.n	8002cb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002cb8:	e02a      	b.n	8002d10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f840 	bl	8002d4a <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e036      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	3302      	adds	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e007      	b.n	8002d02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1cf      	bne.n	8002cba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2200      	movs	r2, #0
 8002d22:	2140      	movs	r1, #64	; 0x40
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f810 	bl	8002d4a <UART_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e006      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b090      	sub	sp, #64	; 0x40
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d5a:	e050      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d04c      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	f7fe f811 	bl	8000d90 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d241      	bcs.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d9a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002da0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e5      	bne.n	8002d7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3314      	adds	r3, #20
 8002db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	e853 3f00 	ldrex	r3, [r3]
 8002dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f023 0301 	bic.w	r3, r3, #1
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	3314      	adds	r3, #20
 8002dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dce:	623a      	str	r2, [r7, #32]
 8002dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	69f9      	ldr	r1, [r7, #28]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e5      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	bf0c      	ite	eq
 8002e0e:	2301      	moveq	r3, #1
 8002e10:	2300      	movne	r3, #0
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d09f      	beq.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3740      	adds	r7, #64	; 0x40
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0c0      	sub	sp, #256	; 0x100
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	ea40 0301 	orr.w	r3, r0, r1
 8002e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e80:	f021 010c 	bic.w	r1, r1, #12
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	ea40 0301 	orr.w	r3, r0, r1
 8002eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <UART_SetConfig+0x2cc>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <UART_SetConfig+0xa0>
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <UART_SetConfig+0x2d0>)
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d104      	bne.n	8002ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec8:	f7ff f97e 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ed0:	e003      	b.n	8002eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed2:	f7ff f965 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8002ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	f040 810c 	bne.w	8003100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	1891      	adds	r1, r2, r2
 8002f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f02:	415b      	adcs	r3, r3
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	eb12 0801 	adds.w	r8, r2, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	eb43 0901 	adc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb49 0303 	adc.w	r3, r9, r3
 8002f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f56:	460b      	mov	r3, r1
 8002f58:	18db      	adds	r3, r3, r3
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	eb42 0303 	adc.w	r3, r2, r3
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54
 8002f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f6c:	f7fd f9a8 	bl	80002c0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011c      	lsls	r4, r3, #4
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc0:	4692      	mov	sl, r2
 8002fc2:	469b      	mov	fp, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fec:	460b      	mov	r3, r1
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003002:	f7fd f95d 	bl	80002c0 <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <UART_SetConfig+0x2d4>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2264      	movs	r2, #100	; 0x64
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	1acb      	subs	r3, r1, r3
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <UART_SetConfig+0x2d4>)
 8003024:	fba3 2302 	umull	r2, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003030:	441c      	add	r4, r3
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800303c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	63b9      	str	r1, [r7, #56]	; 0x38
 800304c:	415b      	adcs	r3, r3
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003054:	4641      	mov	r1, r8
 8003056:	1851      	adds	r1, r2, r1
 8003058:	6339      	str	r1, [r7, #48]	; 0x30
 800305a:	4649      	mov	r1, r9
 800305c:	414b      	adcs	r3, r1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800306c:	4659      	mov	r1, fp
 800306e:	00cb      	lsls	r3, r1, #3
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003076:	4651      	mov	r1, sl
 8003078:	00ca      	lsls	r2, r1, #3
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	4603      	mov	r3, r0
 8003080:	4642      	mov	r2, r8
 8003082:	189b      	adds	r3, r3, r2
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003088:	464b      	mov	r3, r9
 800308a:	460a      	mov	r2, r1
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030be:	f7fd f8ff 	bl	80002c0 <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <UART_SetConfig+0x2d4>)
 80030c8:	fba3 1302 	umull	r1, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	3332      	adds	r3, #50	; 0x32
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <UART_SetConfig+0x2d4>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 0207 	and.w	r2, r3, #7
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4422      	add	r2, r4
 80030ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f0:	e106      	b.n	8003300 <UART_SetConfig+0x4d8>
 80030f2:	bf00      	nop
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800310a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800310e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	6239      	str	r1, [r7, #32]
 800311a:	415b      	adcs	r3, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003122:	4641      	mov	r1, r8
 8003124:	1854      	adds	r4, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0501 	adc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003148:	464b      	mov	r3, r9
 800314a:	eb45 0303 	adc.w	r3, r5, r3
 800314e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800315e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800316e:	4629      	mov	r1, r5
 8003170:	008b      	lsls	r3, r1, #2
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003178:	4621      	mov	r1, r4
 800317a:	008a      	lsls	r2, r1, #2
 800317c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003180:	f7fd f89e 	bl	80002c0 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b60      	ldr	r3, [pc, #384]	; (800330c <UART_SetConfig+0x4e4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800319c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	61b9      	str	r1, [r7, #24]
 80031ac:	415b      	adcs	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	4641      	mov	r1, r8
 80031b6:	1851      	adds	r1, r2, r1
 80031b8:	6139      	str	r1, [r7, #16]
 80031ba:	4649      	mov	r1, r9
 80031bc:	414b      	adcs	r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	00cb      	lsls	r3, r1, #3
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d6:	4651      	mov	r1, sl
 80031d8:	00ca      	lsls	r2, r1, #3
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	4642      	mov	r2, r8
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800320c:	4649      	mov	r1, r9
 800320e:	008b      	lsls	r3, r1, #2
 8003210:	4641      	mov	r1, r8
 8003212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003216:	4641      	mov	r1, r8
 8003218:	008a      	lsls	r2, r1, #2
 800321a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800321e:	f7fd f84f 	bl	80002c0 <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4611      	mov	r1, r2
 8003228:	4b38      	ldr	r3, [pc, #224]	; (800330c <UART_SetConfig+0x4e4>)
 800322a:	fba3 2301 	umull	r2, r3, r3, r1
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2264      	movs	r2, #100	; 0x64
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	1acb      	subs	r3, r1, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a33      	ldr	r2, [pc, #204]	; (800330c <UART_SetConfig+0x4e4>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003248:	441c      	add	r4, r3
 800324a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324e:	2200      	movs	r2, #0
 8003250:	673b      	str	r3, [r7, #112]	; 0x70
 8003252:	677a      	str	r2, [r7, #116]	; 0x74
 8003254:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003258:	4642      	mov	r2, r8
 800325a:	464b      	mov	r3, r9
 800325c:	1891      	adds	r1, r2, r2
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	415b      	adcs	r3, r3
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003268:	4641      	mov	r1, r8
 800326a:	1851      	adds	r1, r2, r1
 800326c:	6039      	str	r1, [r7, #0]
 800326e:	4649      	mov	r1, r9
 8003270:	414b      	adcs	r3, r1
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003280:	4659      	mov	r1, fp
 8003282:	00cb      	lsls	r3, r1, #3
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800328a:	4651      	mov	r1, sl
 800328c:	00ca      	lsls	r2, r1, #3
 800328e:	4610      	mov	r0, r2
 8003290:	4619      	mov	r1, r3
 8003292:	4603      	mov	r3, r0
 8003294:	4642      	mov	r2, r8
 8003296:	189b      	adds	r3, r3, r2
 8003298:	66bb      	str	r3, [r7, #104]	; 0x68
 800329a:	464b      	mov	r3, r9
 800329c:	460a      	mov	r2, r1
 800329e:	eb42 0303 	adc.w	r3, r2, r3
 80032a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	663b      	str	r3, [r7, #96]	; 0x60
 80032ae:	667a      	str	r2, [r7, #100]	; 0x64
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032bc:	4649      	mov	r1, r9
 80032be:	008b      	lsls	r3, r1, #2
 80032c0:	4641      	mov	r1, r8
 80032c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c6:	4641      	mov	r1, r8
 80032c8:	008a      	lsls	r2, r1, #2
 80032ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ce:	f7fc fff7 	bl	80002c0 <__aeabi_uldivmod>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <UART_SetConfig+0x4e4>)
 80032d8:	fba3 1302 	umull	r1, r3, r3, r2
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	2164      	movs	r1, #100	; 0x64
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	3332      	adds	r3, #50	; 0x32
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <UART_SetConfig+0x4e4>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	f003 020f 	and.w	r2, r3, #15
 80032f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4422      	add	r2, r4
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <siprintf>:
 8003310:	b40e      	push	{r1, r2, r3}
 8003312:	b500      	push	{lr}
 8003314:	b09c      	sub	sp, #112	; 0x70
 8003316:	ab1d      	add	r3, sp, #116	; 0x74
 8003318:	9002      	str	r0, [sp, #8]
 800331a:	9006      	str	r0, [sp, #24]
 800331c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003320:	4809      	ldr	r0, [pc, #36]	; (8003348 <siprintf+0x38>)
 8003322:	9107      	str	r1, [sp, #28]
 8003324:	9104      	str	r1, [sp, #16]
 8003326:	4909      	ldr	r1, [pc, #36]	; (800334c <siprintf+0x3c>)
 8003328:	f853 2b04 	ldr.w	r2, [r3], #4
 800332c:	9105      	str	r1, [sp, #20]
 800332e:	6800      	ldr	r0, [r0, #0]
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	a902      	add	r1, sp, #8
 8003334:	f000 f98a 	bl	800364c <_svfiprintf_r>
 8003338:	9b02      	ldr	r3, [sp, #8]
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	b01c      	add	sp, #112	; 0x70
 8003340:	f85d eb04 	ldr.w	lr, [sp], #4
 8003344:	b003      	add	sp, #12
 8003346:	4770      	bx	lr
 8003348:	20000058 	.word	0x20000058
 800334c:	ffff0208 	.word	0xffff0208

08003350 <__errno>:
 8003350:	4b01      	ldr	r3, [pc, #4]	; (8003358 <__errno+0x8>)
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000058 	.word	0x20000058

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4d0d      	ldr	r5, [pc, #52]	; (8003394 <__libc_init_array+0x38>)
 8003360:	4c0d      	ldr	r4, [pc, #52]	; (8003398 <__libc_init_array+0x3c>)
 8003362:	1b64      	subs	r4, r4, r5
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	2600      	movs	r6, #0
 8003368:	42a6      	cmp	r6, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	4d0b      	ldr	r5, [pc, #44]	; (800339c <__libc_init_array+0x40>)
 800336e:	4c0c      	ldr	r4, [pc, #48]	; (80033a0 <__libc_init_array+0x44>)
 8003370:	f000 fc6a 	bl	8003c48 <_init>
 8003374:	1b64      	subs	r4, r4, r5
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	2600      	movs	r6, #0
 800337a:	42a6      	cmp	r6, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f855 3b04 	ldr.w	r3, [r5], #4
 8003384:	4798      	blx	r3
 8003386:	3601      	adds	r6, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f855 3b04 	ldr.w	r3, [r5], #4
 800338e:	4798      	blx	r3
 8003390:	3601      	adds	r6, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	08003d1c 	.word	0x08003d1c
 8003398:	08003d1c 	.word	0x08003d1c
 800339c:	08003d1c 	.word	0x08003d1c
 80033a0:	08003d20 	.word	0x08003d20

080033a4 <__retarget_lock_acquire_recursive>:
 80033a4:	4770      	bx	lr

080033a6 <__retarget_lock_release_recursive>:
 80033a6:	4770      	bx	lr

080033a8 <_free_r>:
 80033a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033aa:	2900      	cmp	r1, #0
 80033ac:	d044      	beq.n	8003438 <_free_r+0x90>
 80033ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033b2:	9001      	str	r0, [sp, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f1a1 0404 	sub.w	r4, r1, #4
 80033ba:	bfb8      	it	lt
 80033bc:	18e4      	addlt	r4, r4, r3
 80033be:	f000 f8df 	bl	8003580 <__malloc_lock>
 80033c2:	4a1e      	ldr	r2, [pc, #120]	; (800343c <_free_r+0x94>)
 80033c4:	9801      	ldr	r0, [sp, #4]
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	b933      	cbnz	r3, 80033d8 <_free_r+0x30>
 80033ca:	6063      	str	r3, [r4, #4]
 80033cc:	6014      	str	r4, [r2, #0]
 80033ce:	b003      	add	sp, #12
 80033d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033d4:	f000 b8da 	b.w	800358c <__malloc_unlock>
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d908      	bls.n	80033ee <_free_r+0x46>
 80033dc:	6825      	ldr	r5, [r4, #0]
 80033de:	1961      	adds	r1, r4, r5
 80033e0:	428b      	cmp	r3, r1
 80033e2:	bf01      	itttt	eq
 80033e4:	6819      	ldreq	r1, [r3, #0]
 80033e6:	685b      	ldreq	r3, [r3, #4]
 80033e8:	1949      	addeq	r1, r1, r5
 80033ea:	6021      	streq	r1, [r4, #0]
 80033ec:	e7ed      	b.n	80033ca <_free_r+0x22>
 80033ee:	461a      	mov	r2, r3
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	b10b      	cbz	r3, 80033f8 <_free_r+0x50>
 80033f4:	42a3      	cmp	r3, r4
 80033f6:	d9fa      	bls.n	80033ee <_free_r+0x46>
 80033f8:	6811      	ldr	r1, [r2, #0]
 80033fa:	1855      	adds	r5, r2, r1
 80033fc:	42a5      	cmp	r5, r4
 80033fe:	d10b      	bne.n	8003418 <_free_r+0x70>
 8003400:	6824      	ldr	r4, [r4, #0]
 8003402:	4421      	add	r1, r4
 8003404:	1854      	adds	r4, r2, r1
 8003406:	42a3      	cmp	r3, r4
 8003408:	6011      	str	r1, [r2, #0]
 800340a:	d1e0      	bne.n	80033ce <_free_r+0x26>
 800340c:	681c      	ldr	r4, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	6053      	str	r3, [r2, #4]
 8003412:	440c      	add	r4, r1
 8003414:	6014      	str	r4, [r2, #0]
 8003416:	e7da      	b.n	80033ce <_free_r+0x26>
 8003418:	d902      	bls.n	8003420 <_free_r+0x78>
 800341a:	230c      	movs	r3, #12
 800341c:	6003      	str	r3, [r0, #0]
 800341e:	e7d6      	b.n	80033ce <_free_r+0x26>
 8003420:	6825      	ldr	r5, [r4, #0]
 8003422:	1961      	adds	r1, r4, r5
 8003424:	428b      	cmp	r3, r1
 8003426:	bf04      	itt	eq
 8003428:	6819      	ldreq	r1, [r3, #0]
 800342a:	685b      	ldreq	r3, [r3, #4]
 800342c:	6063      	str	r3, [r4, #4]
 800342e:	bf04      	itt	eq
 8003430:	1949      	addeq	r1, r1, r5
 8003432:	6021      	streq	r1, [r4, #0]
 8003434:	6054      	str	r4, [r2, #4]
 8003436:	e7ca      	b.n	80033ce <_free_r+0x26>
 8003438:	b003      	add	sp, #12
 800343a:	bd30      	pop	{r4, r5, pc}
 800343c:	2000022c 	.word	0x2000022c

08003440 <sbrk_aligned>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4e0e      	ldr	r6, [pc, #56]	; (800347c <sbrk_aligned+0x3c>)
 8003444:	460c      	mov	r4, r1
 8003446:	6831      	ldr	r1, [r6, #0]
 8003448:	4605      	mov	r5, r0
 800344a:	b911      	cbnz	r1, 8003452 <sbrk_aligned+0x12>
 800344c:	f000 fba6 	bl	8003b9c <_sbrk_r>
 8003450:	6030      	str	r0, [r6, #0]
 8003452:	4621      	mov	r1, r4
 8003454:	4628      	mov	r0, r5
 8003456:	f000 fba1 	bl	8003b9c <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d00a      	beq.n	8003474 <sbrk_aligned+0x34>
 800345e:	1cc4      	adds	r4, r0, #3
 8003460:	f024 0403 	bic.w	r4, r4, #3
 8003464:	42a0      	cmp	r0, r4
 8003466:	d007      	beq.n	8003478 <sbrk_aligned+0x38>
 8003468:	1a21      	subs	r1, r4, r0
 800346a:	4628      	mov	r0, r5
 800346c:	f000 fb96 	bl	8003b9c <_sbrk_r>
 8003470:	3001      	adds	r0, #1
 8003472:	d101      	bne.n	8003478 <sbrk_aligned+0x38>
 8003474:	f04f 34ff 	mov.w	r4, #4294967295
 8003478:	4620      	mov	r0, r4
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	20000230 	.word	0x20000230

08003480 <_malloc_r>:
 8003480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003484:	1ccd      	adds	r5, r1, #3
 8003486:	f025 0503 	bic.w	r5, r5, #3
 800348a:	3508      	adds	r5, #8
 800348c:	2d0c      	cmp	r5, #12
 800348e:	bf38      	it	cc
 8003490:	250c      	movcc	r5, #12
 8003492:	2d00      	cmp	r5, #0
 8003494:	4607      	mov	r7, r0
 8003496:	db01      	blt.n	800349c <_malloc_r+0x1c>
 8003498:	42a9      	cmp	r1, r5
 800349a:	d905      	bls.n	80034a8 <_malloc_r+0x28>
 800349c:	230c      	movs	r3, #12
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	2600      	movs	r6, #0
 80034a2:	4630      	mov	r0, r6
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800357c <_malloc_r+0xfc>
 80034ac:	f000 f868 	bl	8003580 <__malloc_lock>
 80034b0:	f8d8 3000 	ldr.w	r3, [r8]
 80034b4:	461c      	mov	r4, r3
 80034b6:	bb5c      	cbnz	r4, 8003510 <_malloc_r+0x90>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4638      	mov	r0, r7
 80034bc:	f7ff ffc0 	bl	8003440 <sbrk_aligned>
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	4604      	mov	r4, r0
 80034c4:	d155      	bne.n	8003572 <_malloc_r+0xf2>
 80034c6:	f8d8 4000 	ldr.w	r4, [r8]
 80034ca:	4626      	mov	r6, r4
 80034cc:	2e00      	cmp	r6, #0
 80034ce:	d145      	bne.n	800355c <_malloc_r+0xdc>
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d048      	beq.n	8003566 <_malloc_r+0xe6>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	4631      	mov	r1, r6
 80034d8:	4638      	mov	r0, r7
 80034da:	eb04 0903 	add.w	r9, r4, r3
 80034de:	f000 fb5d 	bl	8003b9c <_sbrk_r>
 80034e2:	4581      	cmp	r9, r0
 80034e4:	d13f      	bne.n	8003566 <_malloc_r+0xe6>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	1a6d      	subs	r5, r5, r1
 80034ea:	4629      	mov	r1, r5
 80034ec:	4638      	mov	r0, r7
 80034ee:	f7ff ffa7 	bl	8003440 <sbrk_aligned>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d037      	beq.n	8003566 <_malloc_r+0xe6>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	442b      	add	r3, r5
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d038      	beq.n	8003576 <_malloc_r+0xf6>
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	42a2      	cmp	r2, r4
 8003508:	d12b      	bne.n	8003562 <_malloc_r+0xe2>
 800350a:	2200      	movs	r2, #0
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e00f      	b.n	8003530 <_malloc_r+0xb0>
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	1b52      	subs	r2, r2, r5
 8003514:	d41f      	bmi.n	8003556 <_malloc_r+0xd6>
 8003516:	2a0b      	cmp	r2, #11
 8003518:	d917      	bls.n	800354a <_malloc_r+0xca>
 800351a:	1961      	adds	r1, r4, r5
 800351c:	42a3      	cmp	r3, r4
 800351e:	6025      	str	r5, [r4, #0]
 8003520:	bf18      	it	ne
 8003522:	6059      	strne	r1, [r3, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	bf08      	it	eq
 8003528:	f8c8 1000 	streq.w	r1, [r8]
 800352c:	5162      	str	r2, [r4, r5]
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	4638      	mov	r0, r7
 8003532:	f104 060b 	add.w	r6, r4, #11
 8003536:	f000 f829 	bl	800358c <__malloc_unlock>
 800353a:	f026 0607 	bic.w	r6, r6, #7
 800353e:	1d23      	adds	r3, r4, #4
 8003540:	1af2      	subs	r2, r6, r3
 8003542:	d0ae      	beq.n	80034a2 <_malloc_r+0x22>
 8003544:	1b9b      	subs	r3, r3, r6
 8003546:	50a3      	str	r3, [r4, r2]
 8003548:	e7ab      	b.n	80034a2 <_malloc_r+0x22>
 800354a:	42a3      	cmp	r3, r4
 800354c:	6862      	ldr	r2, [r4, #4]
 800354e:	d1dd      	bne.n	800350c <_malloc_r+0x8c>
 8003550:	f8c8 2000 	str.w	r2, [r8]
 8003554:	e7ec      	b.n	8003530 <_malloc_r+0xb0>
 8003556:	4623      	mov	r3, r4
 8003558:	6864      	ldr	r4, [r4, #4]
 800355a:	e7ac      	b.n	80034b6 <_malloc_r+0x36>
 800355c:	4634      	mov	r4, r6
 800355e:	6876      	ldr	r6, [r6, #4]
 8003560:	e7b4      	b.n	80034cc <_malloc_r+0x4c>
 8003562:	4613      	mov	r3, r2
 8003564:	e7cc      	b.n	8003500 <_malloc_r+0x80>
 8003566:	230c      	movs	r3, #12
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4638      	mov	r0, r7
 800356c:	f000 f80e 	bl	800358c <__malloc_unlock>
 8003570:	e797      	b.n	80034a2 <_malloc_r+0x22>
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	e7dc      	b.n	8003530 <_malloc_r+0xb0>
 8003576:	605b      	str	r3, [r3, #4]
 8003578:	deff      	udf	#255	; 0xff
 800357a:	bf00      	nop
 800357c:	2000022c 	.word	0x2000022c

08003580 <__malloc_lock>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__malloc_lock+0x8>)
 8003582:	f7ff bf0f 	b.w	80033a4 <__retarget_lock_acquire_recursive>
 8003586:	bf00      	nop
 8003588:	20000228 	.word	0x20000228

0800358c <__malloc_unlock>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__malloc_unlock+0x8>)
 800358e:	f7ff bf0a 	b.w	80033a6 <__retarget_lock_release_recursive>
 8003592:	bf00      	nop
 8003594:	20000228 	.word	0x20000228

08003598 <__ssputs_r>:
 8003598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359c:	688e      	ldr	r6, [r1, #8]
 800359e:	461f      	mov	r7, r3
 80035a0:	42be      	cmp	r6, r7
 80035a2:	680b      	ldr	r3, [r1, #0]
 80035a4:	4682      	mov	sl, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	4690      	mov	r8, r2
 80035aa:	d82c      	bhi.n	8003606 <__ssputs_r+0x6e>
 80035ac:	898a      	ldrh	r2, [r1, #12]
 80035ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035b2:	d026      	beq.n	8003602 <__ssputs_r+0x6a>
 80035b4:	6965      	ldr	r5, [r4, #20]
 80035b6:	6909      	ldr	r1, [r1, #16]
 80035b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035bc:	eba3 0901 	sub.w	r9, r3, r1
 80035c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035c4:	1c7b      	adds	r3, r7, #1
 80035c6:	444b      	add	r3, r9
 80035c8:	106d      	asrs	r5, r5, #1
 80035ca:	429d      	cmp	r5, r3
 80035cc:	bf38      	it	cc
 80035ce:	461d      	movcc	r5, r3
 80035d0:	0553      	lsls	r3, r2, #21
 80035d2:	d527      	bpl.n	8003624 <__ssputs_r+0x8c>
 80035d4:	4629      	mov	r1, r5
 80035d6:	f7ff ff53 	bl	8003480 <_malloc_r>
 80035da:	4606      	mov	r6, r0
 80035dc:	b360      	cbz	r0, 8003638 <__ssputs_r+0xa0>
 80035de:	6921      	ldr	r1, [r4, #16]
 80035e0:	464a      	mov	r2, r9
 80035e2:	f000 faeb 	bl	8003bbc <memcpy>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	81a3      	strh	r3, [r4, #12]
 80035f2:	6126      	str	r6, [r4, #16]
 80035f4:	6165      	str	r5, [r4, #20]
 80035f6:	444e      	add	r6, r9
 80035f8:	eba5 0509 	sub.w	r5, r5, r9
 80035fc:	6026      	str	r6, [r4, #0]
 80035fe:	60a5      	str	r5, [r4, #8]
 8003600:	463e      	mov	r6, r7
 8003602:	42be      	cmp	r6, r7
 8003604:	d900      	bls.n	8003608 <__ssputs_r+0x70>
 8003606:	463e      	mov	r6, r7
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	4632      	mov	r2, r6
 800360c:	4641      	mov	r1, r8
 800360e:	f000 faab 	bl	8003b68 <memmove>
 8003612:	68a3      	ldr	r3, [r4, #8]
 8003614:	1b9b      	subs	r3, r3, r6
 8003616:	60a3      	str	r3, [r4, #8]
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	4433      	add	r3, r6
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	2000      	movs	r0, #0
 8003620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003624:	462a      	mov	r2, r5
 8003626:	f000 fad7 	bl	8003bd8 <_realloc_r>
 800362a:	4606      	mov	r6, r0
 800362c:	2800      	cmp	r0, #0
 800362e:	d1e0      	bne.n	80035f2 <__ssputs_r+0x5a>
 8003630:	6921      	ldr	r1, [r4, #16]
 8003632:	4650      	mov	r0, sl
 8003634:	f7ff feb8 	bl	80033a8 <_free_r>
 8003638:	230c      	movs	r3, #12
 800363a:	f8ca 3000 	str.w	r3, [sl]
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003644:	81a3      	strh	r3, [r4, #12]
 8003646:	f04f 30ff 	mov.w	r0, #4294967295
 800364a:	e7e9      	b.n	8003620 <__ssputs_r+0x88>

0800364c <_svfiprintf_r>:
 800364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003650:	4698      	mov	r8, r3
 8003652:	898b      	ldrh	r3, [r1, #12]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	b09d      	sub	sp, #116	; 0x74
 8003658:	4607      	mov	r7, r0
 800365a:	460d      	mov	r5, r1
 800365c:	4614      	mov	r4, r2
 800365e:	d50e      	bpl.n	800367e <_svfiprintf_r+0x32>
 8003660:	690b      	ldr	r3, [r1, #16]
 8003662:	b963      	cbnz	r3, 800367e <_svfiprintf_r+0x32>
 8003664:	2140      	movs	r1, #64	; 0x40
 8003666:	f7ff ff0b 	bl	8003480 <_malloc_r>
 800366a:	6028      	str	r0, [r5, #0]
 800366c:	6128      	str	r0, [r5, #16]
 800366e:	b920      	cbnz	r0, 800367a <_svfiprintf_r+0x2e>
 8003670:	230c      	movs	r3, #12
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	e0d0      	b.n	800381c <_svfiprintf_r+0x1d0>
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	616b      	str	r3, [r5, #20]
 800367e:	2300      	movs	r3, #0
 8003680:	9309      	str	r3, [sp, #36]	; 0x24
 8003682:	2320      	movs	r3, #32
 8003684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003688:	f8cd 800c 	str.w	r8, [sp, #12]
 800368c:	2330      	movs	r3, #48	; 0x30
 800368e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003834 <_svfiprintf_r+0x1e8>
 8003692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003696:	f04f 0901 	mov.w	r9, #1
 800369a:	4623      	mov	r3, r4
 800369c:	469a      	mov	sl, r3
 800369e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a2:	b10a      	cbz	r2, 80036a8 <_svfiprintf_r+0x5c>
 80036a4:	2a25      	cmp	r2, #37	; 0x25
 80036a6:	d1f9      	bne.n	800369c <_svfiprintf_r+0x50>
 80036a8:	ebba 0b04 	subs.w	fp, sl, r4
 80036ac:	d00b      	beq.n	80036c6 <_svfiprintf_r+0x7a>
 80036ae:	465b      	mov	r3, fp
 80036b0:	4622      	mov	r2, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	4638      	mov	r0, r7
 80036b6:	f7ff ff6f 	bl	8003598 <__ssputs_r>
 80036ba:	3001      	adds	r0, #1
 80036bc:	f000 80a9 	beq.w	8003812 <_svfiprintf_r+0x1c6>
 80036c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c2:	445a      	add	r2, fp
 80036c4:	9209      	str	r2, [sp, #36]	; 0x24
 80036c6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80a1 	beq.w	8003812 <_svfiprintf_r+0x1c6>
 80036d0:	2300      	movs	r3, #0
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295
 80036d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036da:	f10a 0a01 	add.w	sl, sl, #1
 80036de:	9304      	str	r3, [sp, #16]
 80036e0:	9307      	str	r3, [sp, #28]
 80036e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e6:	931a      	str	r3, [sp, #104]	; 0x68
 80036e8:	4654      	mov	r4, sl
 80036ea:	2205      	movs	r2, #5
 80036ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f0:	4850      	ldr	r0, [pc, #320]	; (8003834 <_svfiprintf_r+0x1e8>)
 80036f2:	f7fc fd95 	bl	8000220 <memchr>
 80036f6:	9a04      	ldr	r2, [sp, #16]
 80036f8:	b9d8      	cbnz	r0, 8003732 <_svfiprintf_r+0xe6>
 80036fa:	06d0      	lsls	r0, r2, #27
 80036fc:	bf44      	itt	mi
 80036fe:	2320      	movmi	r3, #32
 8003700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003704:	0711      	lsls	r1, r2, #28
 8003706:	bf44      	itt	mi
 8003708:	232b      	movmi	r3, #43	; 0x2b
 800370a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800370e:	f89a 3000 	ldrb.w	r3, [sl]
 8003712:	2b2a      	cmp	r3, #42	; 0x2a
 8003714:	d015      	beq.n	8003742 <_svfiprintf_r+0xf6>
 8003716:	9a07      	ldr	r2, [sp, #28]
 8003718:	4654      	mov	r4, sl
 800371a:	2000      	movs	r0, #0
 800371c:	f04f 0c0a 	mov.w	ip, #10
 8003720:	4621      	mov	r1, r4
 8003722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003726:	3b30      	subs	r3, #48	; 0x30
 8003728:	2b09      	cmp	r3, #9
 800372a:	d94d      	bls.n	80037c8 <_svfiprintf_r+0x17c>
 800372c:	b1b0      	cbz	r0, 800375c <_svfiprintf_r+0x110>
 800372e:	9207      	str	r2, [sp, #28]
 8003730:	e014      	b.n	800375c <_svfiprintf_r+0x110>
 8003732:	eba0 0308 	sub.w	r3, r0, r8
 8003736:	fa09 f303 	lsl.w	r3, r9, r3
 800373a:	4313      	orrs	r3, r2
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	46a2      	mov	sl, r4
 8003740:	e7d2      	b.n	80036e8 <_svfiprintf_r+0x9c>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	1d19      	adds	r1, r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	9103      	str	r1, [sp, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	bfbb      	ittet	lt
 800374e:	425b      	neglt	r3, r3
 8003750:	f042 0202 	orrlt.w	r2, r2, #2
 8003754:	9307      	strge	r3, [sp, #28]
 8003756:	9307      	strlt	r3, [sp, #28]
 8003758:	bfb8      	it	lt
 800375a:	9204      	strlt	r2, [sp, #16]
 800375c:	7823      	ldrb	r3, [r4, #0]
 800375e:	2b2e      	cmp	r3, #46	; 0x2e
 8003760:	d10c      	bne.n	800377c <_svfiprintf_r+0x130>
 8003762:	7863      	ldrb	r3, [r4, #1]
 8003764:	2b2a      	cmp	r3, #42	; 0x2a
 8003766:	d134      	bne.n	80037d2 <_svfiprintf_r+0x186>
 8003768:	9b03      	ldr	r3, [sp, #12]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	9203      	str	r2, [sp, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	bfb8      	it	lt
 8003774:	f04f 33ff 	movlt.w	r3, #4294967295
 8003778:	3402      	adds	r4, #2
 800377a:	9305      	str	r3, [sp, #20]
 800377c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003844 <_svfiprintf_r+0x1f8>
 8003780:	7821      	ldrb	r1, [r4, #0]
 8003782:	2203      	movs	r2, #3
 8003784:	4650      	mov	r0, sl
 8003786:	f7fc fd4b 	bl	8000220 <memchr>
 800378a:	b138      	cbz	r0, 800379c <_svfiprintf_r+0x150>
 800378c:	9b04      	ldr	r3, [sp, #16]
 800378e:	eba0 000a 	sub.w	r0, r0, sl
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	4082      	lsls	r2, r0
 8003796:	4313      	orrs	r3, r2
 8003798:	3401      	adds	r4, #1
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a0:	4825      	ldr	r0, [pc, #148]	; (8003838 <_svfiprintf_r+0x1ec>)
 80037a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a6:	2206      	movs	r2, #6
 80037a8:	f7fc fd3a 	bl	8000220 <memchr>
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d038      	beq.n	8003822 <_svfiprintf_r+0x1d6>
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <_svfiprintf_r+0x1f0>)
 80037b2:	bb1b      	cbnz	r3, 80037fc <_svfiprintf_r+0x1b0>
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	3307      	adds	r3, #7
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	3308      	adds	r3, #8
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	4433      	add	r3, r6
 80037c4:	9309      	str	r3, [sp, #36]	; 0x24
 80037c6:	e768      	b.n	800369a <_svfiprintf_r+0x4e>
 80037c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80037cc:	460c      	mov	r4, r1
 80037ce:	2001      	movs	r0, #1
 80037d0:	e7a6      	b.n	8003720 <_svfiprintf_r+0xd4>
 80037d2:	2300      	movs	r3, #0
 80037d4:	3401      	adds	r4, #1
 80037d6:	9305      	str	r3, [sp, #20]
 80037d8:	4619      	mov	r1, r3
 80037da:	f04f 0c0a 	mov.w	ip, #10
 80037de:	4620      	mov	r0, r4
 80037e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e4:	3a30      	subs	r2, #48	; 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d903      	bls.n	80037f2 <_svfiprintf_r+0x1a6>
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0c6      	beq.n	800377c <_svfiprintf_r+0x130>
 80037ee:	9105      	str	r1, [sp, #20]
 80037f0:	e7c4      	b.n	800377c <_svfiprintf_r+0x130>
 80037f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f6:	4604      	mov	r4, r0
 80037f8:	2301      	movs	r3, #1
 80037fa:	e7f0      	b.n	80037de <_svfiprintf_r+0x192>
 80037fc:	ab03      	add	r3, sp, #12
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	462a      	mov	r2, r5
 8003802:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <_svfiprintf_r+0x1f4>)
 8003804:	a904      	add	r1, sp, #16
 8003806:	4638      	mov	r0, r7
 8003808:	f3af 8000 	nop.w
 800380c:	1c42      	adds	r2, r0, #1
 800380e:	4606      	mov	r6, r0
 8003810:	d1d6      	bne.n	80037c0 <_svfiprintf_r+0x174>
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	065b      	lsls	r3, r3, #25
 8003816:	f53f af2d 	bmi.w	8003674 <_svfiprintf_r+0x28>
 800381a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800381c:	b01d      	add	sp, #116	; 0x74
 800381e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003822:	ab03      	add	r3, sp, #12
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	462a      	mov	r2, r5
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <_svfiprintf_r+0x1f4>)
 800382a:	a904      	add	r1, sp, #16
 800382c:	4638      	mov	r0, r7
 800382e:	f000 f879 	bl	8003924 <_printf_i>
 8003832:	e7eb      	b.n	800380c <_svfiprintf_r+0x1c0>
 8003834:	08003ce0 	.word	0x08003ce0
 8003838:	08003cea 	.word	0x08003cea
 800383c:	00000000 	.word	0x00000000
 8003840:	08003599 	.word	0x08003599
 8003844:	08003ce6 	.word	0x08003ce6

08003848 <_printf_common>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	4616      	mov	r6, r2
 800384e:	4699      	mov	r9, r3
 8003850:	688a      	ldr	r2, [r1, #8]
 8003852:	690b      	ldr	r3, [r1, #16]
 8003854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003858:	4293      	cmp	r3, r2
 800385a:	bfb8      	it	lt
 800385c:	4613      	movlt	r3, r2
 800385e:	6033      	str	r3, [r6, #0]
 8003860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003864:	4607      	mov	r7, r0
 8003866:	460c      	mov	r4, r1
 8003868:	b10a      	cbz	r2, 800386e <_printf_common+0x26>
 800386a:	3301      	adds	r3, #1
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	0699      	lsls	r1, r3, #26
 8003872:	bf42      	ittt	mi
 8003874:	6833      	ldrmi	r3, [r6, #0]
 8003876:	3302      	addmi	r3, #2
 8003878:	6033      	strmi	r3, [r6, #0]
 800387a:	6825      	ldr	r5, [r4, #0]
 800387c:	f015 0506 	ands.w	r5, r5, #6
 8003880:	d106      	bne.n	8003890 <_printf_common+0x48>
 8003882:	f104 0a19 	add.w	sl, r4, #25
 8003886:	68e3      	ldr	r3, [r4, #12]
 8003888:	6832      	ldr	r2, [r6, #0]
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	42ab      	cmp	r3, r5
 800388e:	dc26      	bgt.n	80038de <_printf_common+0x96>
 8003890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003894:	1e13      	subs	r3, r2, #0
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	bf18      	it	ne
 800389a:	2301      	movne	r3, #1
 800389c:	0692      	lsls	r2, r2, #26
 800389e:	d42b      	bmi.n	80038f8 <_printf_common+0xb0>
 80038a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038a4:	4649      	mov	r1, r9
 80038a6:	4638      	mov	r0, r7
 80038a8:	47c0      	blx	r8
 80038aa:	3001      	adds	r0, #1
 80038ac:	d01e      	beq.n	80038ec <_printf_common+0xa4>
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	6922      	ldr	r2, [r4, #16]
 80038b2:	f003 0306 	and.w	r3, r3, #6
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	bf02      	ittt	eq
 80038ba:	68e5      	ldreq	r5, [r4, #12]
 80038bc:	6833      	ldreq	r3, [r6, #0]
 80038be:	1aed      	subeq	r5, r5, r3
 80038c0:	68a3      	ldr	r3, [r4, #8]
 80038c2:	bf0c      	ite	eq
 80038c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038c8:	2500      	movne	r5, #0
 80038ca:	4293      	cmp	r3, r2
 80038cc:	bfc4      	itt	gt
 80038ce:	1a9b      	subgt	r3, r3, r2
 80038d0:	18ed      	addgt	r5, r5, r3
 80038d2:	2600      	movs	r6, #0
 80038d4:	341a      	adds	r4, #26
 80038d6:	42b5      	cmp	r5, r6
 80038d8:	d11a      	bne.n	8003910 <_printf_common+0xc8>
 80038da:	2000      	movs	r0, #0
 80038dc:	e008      	b.n	80038f0 <_printf_common+0xa8>
 80038de:	2301      	movs	r3, #1
 80038e0:	4652      	mov	r2, sl
 80038e2:	4649      	mov	r1, r9
 80038e4:	4638      	mov	r0, r7
 80038e6:	47c0      	blx	r8
 80038e8:	3001      	adds	r0, #1
 80038ea:	d103      	bne.n	80038f4 <_printf_common+0xac>
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f4:	3501      	adds	r5, #1
 80038f6:	e7c6      	b.n	8003886 <_printf_common+0x3e>
 80038f8:	18e1      	adds	r1, r4, r3
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	2030      	movs	r0, #48	; 0x30
 80038fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003902:	4422      	add	r2, r4
 8003904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800390c:	3302      	adds	r3, #2
 800390e:	e7c7      	b.n	80038a0 <_printf_common+0x58>
 8003910:	2301      	movs	r3, #1
 8003912:	4622      	mov	r2, r4
 8003914:	4649      	mov	r1, r9
 8003916:	4638      	mov	r0, r7
 8003918:	47c0      	blx	r8
 800391a:	3001      	adds	r0, #1
 800391c:	d0e6      	beq.n	80038ec <_printf_common+0xa4>
 800391e:	3601      	adds	r6, #1
 8003920:	e7d9      	b.n	80038d6 <_printf_common+0x8e>
	...

08003924 <_printf_i>:
 8003924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003928:	7e0f      	ldrb	r7, [r1, #24]
 800392a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800392c:	2f78      	cmp	r7, #120	; 0x78
 800392e:	4691      	mov	r9, r2
 8003930:	4680      	mov	r8, r0
 8003932:	460c      	mov	r4, r1
 8003934:	469a      	mov	sl, r3
 8003936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800393a:	d807      	bhi.n	800394c <_printf_i+0x28>
 800393c:	2f62      	cmp	r7, #98	; 0x62
 800393e:	d80a      	bhi.n	8003956 <_printf_i+0x32>
 8003940:	2f00      	cmp	r7, #0
 8003942:	f000 80d4 	beq.w	8003aee <_printf_i+0x1ca>
 8003946:	2f58      	cmp	r7, #88	; 0x58
 8003948:	f000 80c0 	beq.w	8003acc <_printf_i+0x1a8>
 800394c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003954:	e03a      	b.n	80039cc <_printf_i+0xa8>
 8003956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800395a:	2b15      	cmp	r3, #21
 800395c:	d8f6      	bhi.n	800394c <_printf_i+0x28>
 800395e:	a101      	add	r1, pc, #4	; (adr r1, 8003964 <_printf_i+0x40>)
 8003960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039d1 	.word	0x080039d1
 800396c:	0800394d 	.word	0x0800394d
 8003970:	0800394d 	.word	0x0800394d
 8003974:	0800394d 	.word	0x0800394d
 8003978:	0800394d 	.word	0x0800394d
 800397c:	080039d1 	.word	0x080039d1
 8003980:	0800394d 	.word	0x0800394d
 8003984:	0800394d 	.word	0x0800394d
 8003988:	0800394d 	.word	0x0800394d
 800398c:	0800394d 	.word	0x0800394d
 8003990:	08003ad5 	.word	0x08003ad5
 8003994:	080039fd 	.word	0x080039fd
 8003998:	08003a8f 	.word	0x08003a8f
 800399c:	0800394d 	.word	0x0800394d
 80039a0:	0800394d 	.word	0x0800394d
 80039a4:	08003af7 	.word	0x08003af7
 80039a8:	0800394d 	.word	0x0800394d
 80039ac:	080039fd 	.word	0x080039fd
 80039b0:	0800394d 	.word	0x0800394d
 80039b4:	0800394d 	.word	0x0800394d
 80039b8:	08003a97 	.word	0x08003a97
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	1d1a      	adds	r2, r3, #4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039cc:	2301      	movs	r3, #1
 80039ce:	e09f      	b.n	8003b10 <_printf_i+0x1ec>
 80039d0:	6820      	ldr	r0, [r4, #0]
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	0607      	lsls	r7, r0, #24
 80039d6:	f103 0104 	add.w	r1, r3, #4
 80039da:	6029      	str	r1, [r5, #0]
 80039dc:	d501      	bpl.n	80039e2 <_printf_i+0xbe>
 80039de:	681e      	ldr	r6, [r3, #0]
 80039e0:	e003      	b.n	80039ea <_printf_i+0xc6>
 80039e2:	0646      	lsls	r6, r0, #25
 80039e4:	d5fb      	bpl.n	80039de <_printf_i+0xba>
 80039e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039ea:	2e00      	cmp	r6, #0
 80039ec:	da03      	bge.n	80039f6 <_printf_i+0xd2>
 80039ee:	232d      	movs	r3, #45	; 0x2d
 80039f0:	4276      	negs	r6, r6
 80039f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f6:	485a      	ldr	r0, [pc, #360]	; (8003b60 <_printf_i+0x23c>)
 80039f8:	230a      	movs	r3, #10
 80039fa:	e012      	b.n	8003a22 <_printf_i+0xfe>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	1d19      	adds	r1, r3, #4
 8003a02:	6029      	str	r1, [r5, #0]
 8003a04:	0605      	lsls	r5, r0, #24
 8003a06:	d501      	bpl.n	8003a0c <_printf_i+0xe8>
 8003a08:	681e      	ldr	r6, [r3, #0]
 8003a0a:	e002      	b.n	8003a12 <_printf_i+0xee>
 8003a0c:	0641      	lsls	r1, r0, #25
 8003a0e:	d5fb      	bpl.n	8003a08 <_printf_i+0xe4>
 8003a10:	881e      	ldrh	r6, [r3, #0]
 8003a12:	4853      	ldr	r0, [pc, #332]	; (8003b60 <_printf_i+0x23c>)
 8003a14:	2f6f      	cmp	r7, #111	; 0x6f
 8003a16:	bf0c      	ite	eq
 8003a18:	2308      	moveq	r3, #8
 8003a1a:	230a      	movne	r3, #10
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a22:	6865      	ldr	r5, [r4, #4]
 8003a24:	60a5      	str	r5, [r4, #8]
 8003a26:	2d00      	cmp	r5, #0
 8003a28:	bfa2      	ittt	ge
 8003a2a:	6821      	ldrge	r1, [r4, #0]
 8003a2c:	f021 0104 	bicge.w	r1, r1, #4
 8003a30:	6021      	strge	r1, [r4, #0]
 8003a32:	b90e      	cbnz	r6, 8003a38 <_printf_i+0x114>
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	d04b      	beq.n	8003ad0 <_printf_i+0x1ac>
 8003a38:	4615      	mov	r5, r2
 8003a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8003a42:	5dc7      	ldrb	r7, [r0, r7]
 8003a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a48:	4637      	mov	r7, r6
 8003a4a:	42bb      	cmp	r3, r7
 8003a4c:	460e      	mov	r6, r1
 8003a4e:	d9f4      	bls.n	8003a3a <_printf_i+0x116>
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d10b      	bne.n	8003a6c <_printf_i+0x148>
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	07de      	lsls	r6, r3, #31
 8003a58:	d508      	bpl.n	8003a6c <_printf_i+0x148>
 8003a5a:	6923      	ldr	r3, [r4, #16]
 8003a5c:	6861      	ldr	r1, [r4, #4]
 8003a5e:	4299      	cmp	r1, r3
 8003a60:	bfde      	ittt	le
 8003a62:	2330      	movle	r3, #48	; 0x30
 8003a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a6c:	1b52      	subs	r2, r2, r5
 8003a6e:	6122      	str	r2, [r4, #16]
 8003a70:	f8cd a000 	str.w	sl, [sp]
 8003a74:	464b      	mov	r3, r9
 8003a76:	aa03      	add	r2, sp, #12
 8003a78:	4621      	mov	r1, r4
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f7ff fee4 	bl	8003848 <_printf_common>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d14a      	bne.n	8003b1a <_printf_i+0x1f6>
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	b004      	add	sp, #16
 8003a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f043 0320 	orr.w	r3, r3, #32
 8003a94:	6023      	str	r3, [r4, #0]
 8003a96:	4833      	ldr	r0, [pc, #204]	; (8003b64 <_printf_i+0x240>)
 8003a98:	2778      	movs	r7, #120	; 0x78
 8003a9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a9e:	6823      	ldr	r3, [r4, #0]
 8003aa0:	6829      	ldr	r1, [r5, #0]
 8003aa2:	061f      	lsls	r7, r3, #24
 8003aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aa8:	d402      	bmi.n	8003ab0 <_printf_i+0x18c>
 8003aaa:	065f      	lsls	r7, r3, #25
 8003aac:	bf48      	it	mi
 8003aae:	b2b6      	uxthmi	r6, r6
 8003ab0:	07df      	lsls	r7, r3, #31
 8003ab2:	bf48      	it	mi
 8003ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab8:	6029      	str	r1, [r5, #0]
 8003aba:	bf48      	it	mi
 8003abc:	6023      	strmi	r3, [r4, #0]
 8003abe:	b91e      	cbnz	r6, 8003ac8 <_printf_i+0x1a4>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f023 0320 	bic.w	r3, r3, #32
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	2310      	movs	r3, #16
 8003aca:	e7a7      	b.n	8003a1c <_printf_i+0xf8>
 8003acc:	4824      	ldr	r0, [pc, #144]	; (8003b60 <_printf_i+0x23c>)
 8003ace:	e7e4      	b.n	8003a9a <_printf_i+0x176>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	e7bd      	b.n	8003a50 <_printf_i+0x12c>
 8003ad4:	682b      	ldr	r3, [r5, #0]
 8003ad6:	6826      	ldr	r6, [r4, #0]
 8003ad8:	6961      	ldr	r1, [r4, #20]
 8003ada:	1d18      	adds	r0, r3, #4
 8003adc:	6028      	str	r0, [r5, #0]
 8003ade:	0635      	lsls	r5, r6, #24
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	d501      	bpl.n	8003ae8 <_printf_i+0x1c4>
 8003ae4:	6019      	str	r1, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <_printf_i+0x1ca>
 8003ae8:	0670      	lsls	r0, r6, #25
 8003aea:	d5fb      	bpl.n	8003ae4 <_printf_i+0x1c0>
 8003aec:	8019      	strh	r1, [r3, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	6123      	str	r3, [r4, #16]
 8003af2:	4615      	mov	r5, r2
 8003af4:	e7bc      	b.n	8003a70 <_printf_i+0x14c>
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	1d1a      	adds	r2, r3, #4
 8003afa:	602a      	str	r2, [r5, #0]
 8003afc:	681d      	ldr	r5, [r3, #0]
 8003afe:	6862      	ldr	r2, [r4, #4]
 8003b00:	2100      	movs	r1, #0
 8003b02:	4628      	mov	r0, r5
 8003b04:	f7fc fb8c 	bl	8000220 <memchr>
 8003b08:	b108      	cbz	r0, 8003b0e <_printf_i+0x1ea>
 8003b0a:	1b40      	subs	r0, r0, r5
 8003b0c:	6060      	str	r0, [r4, #4]
 8003b0e:	6863      	ldr	r3, [r4, #4]
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	2300      	movs	r3, #0
 8003b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b18:	e7aa      	b.n	8003a70 <_printf_i+0x14c>
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	462a      	mov	r2, r5
 8003b1e:	4649      	mov	r1, r9
 8003b20:	4640      	mov	r0, r8
 8003b22:	47d0      	blx	sl
 8003b24:	3001      	adds	r0, #1
 8003b26:	d0ad      	beq.n	8003a84 <_printf_i+0x160>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	079b      	lsls	r3, r3, #30
 8003b2c:	d413      	bmi.n	8003b56 <_printf_i+0x232>
 8003b2e:	68e0      	ldr	r0, [r4, #12]
 8003b30:	9b03      	ldr	r3, [sp, #12]
 8003b32:	4298      	cmp	r0, r3
 8003b34:	bfb8      	it	lt
 8003b36:	4618      	movlt	r0, r3
 8003b38:	e7a6      	b.n	8003a88 <_printf_i+0x164>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	4649      	mov	r1, r9
 8003b40:	4640      	mov	r0, r8
 8003b42:	47d0      	blx	sl
 8003b44:	3001      	adds	r0, #1
 8003b46:	d09d      	beq.n	8003a84 <_printf_i+0x160>
 8003b48:	3501      	adds	r5, #1
 8003b4a:	68e3      	ldr	r3, [r4, #12]
 8003b4c:	9903      	ldr	r1, [sp, #12]
 8003b4e:	1a5b      	subs	r3, r3, r1
 8003b50:	42ab      	cmp	r3, r5
 8003b52:	dcf2      	bgt.n	8003b3a <_printf_i+0x216>
 8003b54:	e7eb      	b.n	8003b2e <_printf_i+0x20a>
 8003b56:	2500      	movs	r5, #0
 8003b58:	f104 0619 	add.w	r6, r4, #25
 8003b5c:	e7f5      	b.n	8003b4a <_printf_i+0x226>
 8003b5e:	bf00      	nop
 8003b60:	08003cf1 	.word	0x08003cf1
 8003b64:	08003d02 	.word	0x08003d02

08003b68 <memmove>:
 8003b68:	4288      	cmp	r0, r1
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	eb01 0402 	add.w	r4, r1, r2
 8003b70:	d902      	bls.n	8003b78 <memmove+0x10>
 8003b72:	4284      	cmp	r4, r0
 8003b74:	4623      	mov	r3, r4
 8003b76:	d807      	bhi.n	8003b88 <memmove+0x20>
 8003b78:	1e43      	subs	r3, r0, #1
 8003b7a:	42a1      	cmp	r1, r4
 8003b7c:	d008      	beq.n	8003b90 <memmove+0x28>
 8003b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b86:	e7f8      	b.n	8003b7a <memmove+0x12>
 8003b88:	4402      	add	r2, r0
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	428a      	cmp	r2, r1
 8003b8e:	d100      	bne.n	8003b92 <memmove+0x2a>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b9a:	e7f7      	b.n	8003b8c <memmove+0x24>

08003b9c <_sbrk_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d06      	ldr	r5, [pc, #24]	; (8003bb8 <_sbrk_r+0x1c>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fd f81a 	bl	8000be0 <_sbrk>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_sbrk_r+0x1a>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_sbrk_r+0x1a>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	20000224 	.word	0x20000224

08003bbc <memcpy>:
 8003bbc:	440a      	add	r2, r1
 8003bbe:	4291      	cmp	r1, r2
 8003bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bc4:	d100      	bne.n	8003bc8 <memcpy+0xc>
 8003bc6:	4770      	bx	lr
 8003bc8:	b510      	push	{r4, lr}
 8003bca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bd2:	4291      	cmp	r1, r2
 8003bd4:	d1f9      	bne.n	8003bca <memcpy+0xe>
 8003bd6:	bd10      	pop	{r4, pc}

08003bd8 <_realloc_r>:
 8003bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bdc:	4680      	mov	r8, r0
 8003bde:	4614      	mov	r4, r2
 8003be0:	460e      	mov	r6, r1
 8003be2:	b921      	cbnz	r1, 8003bee <_realloc_r+0x16>
 8003be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be8:	4611      	mov	r1, r2
 8003bea:	f7ff bc49 	b.w	8003480 <_malloc_r>
 8003bee:	b92a      	cbnz	r2, 8003bfc <_realloc_r+0x24>
 8003bf0:	f7ff fbda 	bl	80033a8 <_free_r>
 8003bf4:	4625      	mov	r5, r4
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bfc:	f000 f81b 	bl	8003c36 <_malloc_usable_size_r>
 8003c00:	4284      	cmp	r4, r0
 8003c02:	4607      	mov	r7, r0
 8003c04:	d802      	bhi.n	8003c0c <_realloc_r+0x34>
 8003c06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c0a:	d812      	bhi.n	8003c32 <_realloc_r+0x5a>
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7ff fc36 	bl	8003480 <_malloc_r>
 8003c14:	4605      	mov	r5, r0
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d0ed      	beq.n	8003bf6 <_realloc_r+0x1e>
 8003c1a:	42bc      	cmp	r4, r7
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	4631      	mov	r1, r6
 8003c20:	bf28      	it	cs
 8003c22:	463a      	movcs	r2, r7
 8003c24:	f7ff ffca 	bl	8003bbc <memcpy>
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff fbbc 	bl	80033a8 <_free_r>
 8003c30:	e7e1      	b.n	8003bf6 <_realloc_r+0x1e>
 8003c32:	4635      	mov	r5, r6
 8003c34:	e7df      	b.n	8003bf6 <_realloc_r+0x1e>

08003c36 <_malloc_usable_size_r>:
 8003c36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c3a:	1f18      	subs	r0, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bfbc      	itt	lt
 8003c40:	580b      	ldrlt	r3, [r1, r0]
 8003c42:	18c0      	addlt	r0, r0, r3
 8003c44:	4770      	bx	lr
	...

08003c48 <_init>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr

08003c54 <_fini>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr
